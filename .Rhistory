ranks
ranks=c("Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus")
ranks = str_to_lower(ranks)
ranks
ranks["kingdom"]
ranks[["kingdom"]]
ranks[ranks == "kingdom"]
ranks[ranks == "kingdom"] = "superkingdom"
ranks
ranks=c("Kingdom","Phylum","Class","Order","Family","Genus")
ranks = str_to_lower(ranks)
if("kingdom" %in% ranks){
ranks[ranks == "kingdom"] = "superkingdom"
}
ranks
df=taxo_df
ranks = str_to_lower(ranks)
if("kingdom" %in% ranks){
ranks[ranks == "kingdom"] = "superkingdom"
}
df[df==""]<-NA
paternsToRemove = c("^.+_environmental.+|environmental_.+|uncultured_.+|_sp\\..+|_sp.|_sp.+| sp\\..+| sp.| sp.+|_\\(.+|^.+_metagenome|_cf.")
df = df %>% mutate_all(list(~str_replace(.,paternsToRemove, ""))) %>% mutate_all(list(~na_if(.,"")))
if("species" %in% tolower(colnames(df))){
df$Species = paste0(sapply(strsplit(df$Species,"_"), `[`, 1)," ", sapply(strsplit(df$Species,"_"), `[`, 2))
}
df = df %>% mutate_all(list(~str_replace(.,"NA NA| NA", ""))) %>% mutate(across(everything(), gsub, pattern = "_", replacement = " ")) %>% mutate_all(list(~na_if(.,"")))
ranks_indexes = which(tolower(colnames(df)) %in% ranks)
non_taxo_ranks = c("otu","otus","OTU","OTUs","OTUS","asv","asvs","ASVs","ASV","ASVS","nR")
rpt_indexes = max.col(!is.na(df[colnames(df)%ni%non_taxo_ranks]), "last")
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df[x, rpt_indexes[x]]))
res_df = data.frame("ASV" = rownames(df), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df$id = getId(taxa = res_df$taxa, sqlFile = sqlFile, onlyScientific = TRUE) ###############################################
length(res_df[which(is.na(res_df$id)),]$id)
r = 1
# Deals with NA ids
while (r<length(ranks_indexes) & any(is.na(res_df$id))) {
df_temp = df[which(is.na(res_df$id)),]
res_df_temp = res_df[which(is.na(res_df$id)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - r
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
res_df_temp = data.frame("ASV" = rownames(df_temp), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df[which(is.na(res_df$id)),]$id = getId(taxa = res_df_temp$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
length(res_df[which(is.na(res_df$id)),]$id)
r = r + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 1
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids again but at higher level
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
if(!is.na(any(str_detect(res_df$id, ",", negate = FALSE))))
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 2
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
res_df[ranks] = getTaxonomy(res_df$id, sqlFile, desiredTaxa = str_to_lower(ranks))
res_df = res_df[,colnames(res_df) %in% c(ranks,non_taxo_ranks)]
res_df$superkingdom = res_df$superkingdom %>% replace_na("Unknown")
res_df = res_df %>% column_to_rownames("ASV")
res_df=cbind(res_df,df[,colnames(df) %in% non_taxo_ranks,drop = FALSE])
taxo_normalisation = function(df, sqlFile, ranks =c("superkingdom","phylum","class","order","family","genus","species")){
ranks = str_to_lower(ranks)
if("kingdom" %in% ranks){
ranks[ranks == "kingdom"] = "superkingdom"
}
df[df==""]<-NA
paternsToRemove = c("^.+_environmental.+|environmental_.+|uncultured_.+|_sp\\..+|_sp.|_sp.+| sp\\..+| sp.| sp.+|_\\(.+|^.+_metagenome|_cf.")
df = df %>% mutate_all(list(~str_replace(.,paternsToRemove, ""))) %>% mutate_all(list(~na_if(.,"")))
if("species" %in% tolower(colnames(df))){
df$Species = paste0(sapply(strsplit(df$Species,"_"), `[`, 1)," ", sapply(strsplit(df$Species,"_"), `[`, 2))
}
df = df %>% mutate_all(list(~str_replace(.,"NA NA| NA", ""))) %>% mutate(across(everything(), gsub, pattern = "_", replacement = " ")) %>% mutate_all(list(~na_if(.,"")))
ranks_indexes = which(tolower(colnames(df)) %in% ranks)
non_taxo_ranks = c("otu","otus","OTU","OTUs","OTUS","asv","asvs","ASVs","ASV","ASVS","nR")
rpt_indexes = max.col(!is.na(df[colnames(df)%ni%non_taxo_ranks]), "last")
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df[x, rpt_indexes[x]]))
res_df = data.frame("ASV" = rownames(df), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df$id = getId(taxa = res_df$taxa, sqlFile = sqlFile, onlyScientific = TRUE) ###############################################
length(res_df[which(is.na(res_df$id)),]$id)
r = 1
# Deals with NA ids
while (r<length(ranks_indexes) & any(is.na(res_df$id))) {
df_temp = df[which(is.na(res_df$id)),]
res_df_temp = res_df[which(is.na(res_df$id)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - r
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
res_df_temp = data.frame("ASV" = rownames(df_temp), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df[which(is.na(res_df$id)),]$id = getId(taxa = res_df_temp$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
length(res_df[which(is.na(res_df$id)),]$id)
r = r + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 1
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids again but at higher level
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
if(!is.na(any(str_detect(res_df$id, ",", negate = FALSE))))
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 2
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
res_df[ranks] = getTaxonomy(res_df$id, sqlFile, desiredTaxa = str_to_lower(ranks))
res_df = res_df[,colnames(res_df) %in% c(ranks,non_taxo_ranks)]
res_df$superkingdom = res_df$superkingdom %>% replace_na("Unknown")
res_df = res_df %>% column_to_rownames("ASV")
res_df=cbind(res_df,df[,colnames(df) %in% non_taxo_ranks,drop = FALSE])
return(res_df)
}
data("ps_test_data")
taxo_df = ps_test_data@tax_table@.Data %>% as.data.frame()
taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
test = taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
View(test)
"asv" %in% str_to_lower(colnames(df)
)
colnames(df) = str_to_lower(colnames(df))
taxo_df = ps_test_data@tax_table@.Data %>% as.data.frame()
taxo_df = ps_test_data@tax_table@.Data %>% as.data.frame()
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
View(t)
taxo_df = ps_test_data@tax_table@.Data %>% as.data.frame() %>% rownames_to_column("ASV")
taxo_normalisation = function(df, sqlFile = "accessionTaxa.sql", ranks =c("superkingdom","phylum","class","order","family","genus","species")){
ranks = str_to_lower(ranks)
colnames(df) = str_to_lower(colnames(df))
if("kingdom" %in% ranks){
ranks[ranks == "kingdom"] = "superkingdom"
}
if("asv" %in% colnames(df)){
df = df %>% column_to_rownames("asv")
}
df[df==""]<-NA
paternsToRemove = c("^.+_environmental.+|environmental_.+|uncultured_.+|_sp\\..+|_sp.|_sp.+| sp\\..+| sp.| sp.+|_\\(.+|^.+_metagenome|_cf.")
df = df %>% mutate_all(list(~str_replace(.,paternsToRemove, ""))) %>% mutate_all(list(~na_if(.,"")))
if("species" %in% tolower(colnames(df))){
df$Species = paste0(sapply(strsplit(df$Species,"_"), `[`, 1)," ", sapply(strsplit(df$Species,"_"), `[`, 2))
}
df = df %>% mutate_all(list(~str_replace(.,"NA NA| NA", ""))) %>% mutate(across(everything(), gsub, pattern = "_", replacement = " ")) %>% mutate_all(list(~na_if(.,"")))
ranks_indexes = which(tolower(colnames(df)) %in% ranks)
non_taxo_ranks = c("otu","otus","OTU","OTUs","OTUS","asv","asvs","ASVs","ASV","ASVS","nR")
rpt_indexes = max.col(!is.na(df[colnames(df)%ni%non_taxo_ranks]), "last")
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df[x, rpt_indexes[x]]))
res_df = data.frame("ASV" = rownames(df), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df$id = getId(taxa = res_df$taxa, sqlFile = sqlFile, onlyScientific = TRUE) ###############################################
length(res_df[which(is.na(res_df$id)),]$id)
r = 1
# Deals with NA ids
while (r<length(ranks_indexes) & any(is.na(res_df$id))) {
df_temp = df[which(is.na(res_df$id)),]
res_df_temp = res_df[which(is.na(res_df$id)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - r
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
res_df_temp = data.frame("ASV" = rownames(df_temp), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df[which(is.na(res_df$id)),]$id = getId(taxa = res_df_temp$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
length(res_df[which(is.na(res_df$id)),]$id)
r = r + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 1
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids again but at higher level
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
if(!is.na(any(str_detect(res_df$id, ",", negate = FALSE))))
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 2
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
res_df[ranks] = getTaxonomy(res_df$id, sqlFile, desiredTaxa = str_to_lower(ranks))
res_df = res_df[,colnames(res_df) %in% c(ranks,non_taxo_ranks)]
res_df$superkingdom = res_df$superkingdom %>% replace_na("Unknown")
res_df = res_df %>% column_to_rownames("ASV")
res_df=cbind(res_df,df[,colnames(df) %in% non_taxo_ranks,drop = FALSE])
return(res_df)
}
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
View(t)
taxo_normalisation = function(df, sqlFile = "accessionTaxa.sql", ranks =c("superkingdom","phylum","class","order","family","genus","species")){
ranks = str_to_lower(ranks)
colnames(df) = str_to_lower(colnames(df))
if("kingdom" %in% ranks){
ranks[ranks == "kingdom"] = "superkingdom"
}
if("asv" %in% colnames(df)){
df = df %>% column_to_rownames("asv")
}
df[df==""]<-NA
paternsToRemove = c("^.+_environmental.+|environmental_.+|uncultured_.+|_sp\\..+|_sp.|_sp.+| sp\\..+| sp.| sp.+|_\\(.+|^.+_metagenome|_cf.")
df = df %>% mutate_all(list(~str_replace(.,paternsToRemove, ""))) %>% mutate_all(list(~na_if(.,"")))
if("species" %in% tolower(colnames(df))){
df$Species = paste0(sapply(strsplit(df$Species,"_"), `[`, 1)," ", sapply(strsplit(df$Species,"_"), `[`, 2))
}
df = df %>% mutate_all(list(~str_replace(.,"NA NA| NA", ""))) %>% mutate(across(everything(), gsub, pattern = "_", replacement = " ")) %>% mutate_all(list(~na_if(.,"")))
ranks_indexes = which(tolower(colnames(df)) %in% ranks)
non_taxo_ranks = c("otu","otus","OTU","OTUs","OTUS","asv","asvs","ASVs","ASV","ASVS","nR")
rpt_indexes = max.col(!is.na(df[colnames(df)%ni%non_taxo_ranks]), "last")
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df[x, rpt_indexes[x]]))
res_df = data.frame("ASV" = rownames(df), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df$id = getId(taxa = res_df$taxa, sqlFile = sqlFile, onlyScientific = TRUE) ###############################################
length(res_df[which(is.na(res_df$id)),]$id)
r = 1
# Deals with NA ids
while (r<length(ranks_indexes) & any(is.na(res_df$id))) {
df_temp = df[which(is.na(res_df$id)),]
res_df_temp = res_df[which(is.na(res_df$id)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - r
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
res_df_temp = data.frame("ASV" = rownames(df_temp), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df[which(is.na(res_df$id)),]$id = getId(taxa = res_df_temp$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
length(res_df[which(is.na(res_df$id)),]$id)
r = r + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 1
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids again but at higher level
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
if(!is.na(any(str_detect(res_df$id, ",", negate = FALSE))))
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 2
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
res_df[ranks] = getTaxonomy(res_df$id, sqlFile, desiredTaxa = str_to_lower(ranks))
res_df = res_df[,colnames(res_df) %in% c(ranks,non_taxo_ranks)]
res_df$superkingdom = res_df$superkingdom %>% replace_na("Unknown")
res_df = res_df %>% column_to_rownames("ASV")
res_df=cbind(res_df,df[,colnames(df) %in% non_taxo_ranks,drop = FALSE])
return(res_df)
}
data("ps_test_data")
taxo_df = ps_test_data@tax_table@.Data %>% as.data.frame()
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
View(t)
library(biohelper)
library(biohelper)
data("ps_test_data")
taxo_df = ps_test_data@tax_table@.Data %>% as.data.frame()
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
View(t)
View(taxo_df)
library(biohelper)
View(taxo_df)
library(biohelper)
data("ps_test_data")
taxo_df = ps_test_data@tax_table@.Data %>% as.data.frame()
taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Superkingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
library(biohelper)
data("ps_test_data")
taxo_df = ps_test_data@tax_table@.Data %>% as.data.frame()
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Superkingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
View(t)
t = read_csv("~/Desktop/SEA2020_COI/DADA2_results_COI/taxo.csv") %>% column_to_rownames("representative")
df = read_csv("~/Desktop/SEA2020_COI/DADA2_results_COI/taxo.csv") %>% column_to_rownames("representative")
df = df %>% select(-c("taxID","taxon","rank","score","superkingdom"))
View(df)
taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Superkingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Superkingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
taxo_df = read_csv("~/Desktop/SEA2020_COI/DADA2_results_COI/taxo.csv") %>% column_to_rownames("representative")
taxo_df = taxo_df %>% select(-c("taxID","taxon","rank","score","superkingdom"))
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Superkingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
View(t)
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Superkingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus","Species"))
View(t)
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Superkingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus","Species"))
c("kingdom","phylum","class","order","family","genus","species")
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("kingdom","phylum","class","order","family","genus","species"))
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("kingdom","phylum","class","order","family","genus","Species"))
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("superkingdom","phylum","class","order","family","genus","Species"))
View(t)
library(biohelper)
taxo_df = read_csv("~/Desktop/SEA2020_COI/DADA2_results_COI/taxo.csv") %>% column_to_rownames("representative")
taxo_df = taxo_df %>% select(-c("taxID","taxon","rank","score","superkingdom"))
taxo_df = taxo_df %>% select(-c("taxID","taxon","rank","score","superkingdom"))
taxo_df = read_csv("~/Desktop/SEA2020_COI/DADA2_results_COI/taxo.csv") %>% column_to_rownames("representative")
taxo_df = taxo_df %>% select(-c("taxID","taxon","rank","score","superkingdom"))
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Superkingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus", "species"))
tmpFile<-tempfile()
writeLines(namesText,tmpFile)
taxaNames<-read.names.sql(tmpFile,sqlFile)
nodesText<-c(
"1\t|\t1\t|\tno rank\t|\t\t|\t8\t|\t0\t|\t1\t|\t0\t|\t0\t|\t0\t|\t0\t|\t0\t|\t\t|",
"2\t|\t131567\t|\tsuperkingdom\t|\t\t|\t0\t|\t0\t|\t11\t|\t0\t|\t0\t|\t0\t|\t0\t|\t0\t|\t\t|",
"6\t|\t335928\t|\tgenus\t|\t\t|\t0\t|\t1\t|\t11\t|\t1\t|\t0\t|\t1\t|\t0\t|\t0\t|\t\t|",
"7\t|\t6\t|\tspecies\t|\tAC\t|\t0\t|\t1\t|\t11\t|\t1\t|\t0\t|\t1\t|\t1\t|\t0\t|\t\t|",
"9\t|\t32199\t|\tspecies\t|\tBA\t|\t0\t|\t1\t|\t11\t|\t1\t|\t0\t|\t1\t|\t1\t|\t0\t|\t\t|",
"9606\t|\t9605\t|\tspecies", "9605\t|\t207598\t|\tgenus", "207598\t|\t9604\t|\tsubfamily",
"9604\t|\t314295\t|\tfamily", "314295\t|\t9526\t|\tsuperfamily",
"9526\t|\t314293\t|\tparvorder", "314293\t|\t376913\t|\tinfraorder",
"376913\t|\t9443\t|\tsuborder", "9443\t|\t314146\t|\torder",
"314146\t|\t1437010\t|\tsuperorder", "1437010\t|\t9347\t|\tno rank",
"9347\t|\t32525\t|\tno rank", "32525\t|\t40674\t|\tno rank",
"40674\t|\t32524\t|\tclass", "32524\t|\t32523\t|\tno rank", "32523\t|\t1338369\t|\tno rank",
"1338369\t|\t8287\t|\tno rank", "8287\t|\t117571\t|\tno rank",
"117571\t|\t117570\t|\tno rank", "117570\t|\t7776\t|\tno rank",
"7776\t|\t7742\t|\tno rank", "7742\t|\t89593\t|\tno rank", "89593\t|\t7711\t|\tsubphylum",
"7711\t|\t33511\t|\tphylum", "33511\t|\t33213\t|\tno rank", "33213\t|\t6072\t|\tno rank",
"6072\t|\t33208\t|\tno rank", "33208\t|\t33154\t|\tkingdom",
"33154\t|\t2759\t|\tno rank", "2759\t|\t131567\t|\tsuperkingdom",
"131567\t|\t1\t|\tno rank"
)
writeLines(nodesText,tmpFile)
taxaNodes<-read.nodes.sql(tmpFile,sqlFile)
getTaxonomy(c(9606,9605),sqlFile)
tmpFile<-tempfile()
writeLines(namesText,tmpFile)
tmpFile<-tempfile()
sqlFile<-tempfile()
namesText<-c(
"1\t|\tall\t|\t\t|\tsynonym\t|",
"1\t|\troot\t|\t\t|\tscientific name\t|",
"2\t|\tBacteria\t|\tBacteria <prokaryotes>\t|\tscientific name\t|",
"2\t|\tMonera\t|\tMonera <Bacteria>\t|\tin-part\t|",
"2\t|\tProcaryotae\t|\tProcaryotae <Bacteria>\t|\tin-part\t|",
"9606\t|\tHomo sapiens\t|\t\t|\tscientific name",
"9605\t|\tHomo\t|\t\t|\tscientific name",
"207598\t|\tHomininae\t|\t\t|\tscientific name",
"9604\t|\tHominidae\t|\t\t|\tscientific name",
"314295\t|\tHominoidea\t|\t\t|\tscientific name",
"9526\t|\tCatarrhini\t|\t\t|\tscientific name",
"314293\t|\tSimiiformes\t|\t\t|\tscientific name",
"376913\t|\tHaplorrhini\t|\t\t|\tscientific name",
"9443\t|\tPrimates\t|\t\t|\tscientific name",
"314146\t|\tEuarchontoglires\t|\t\t|\tscientific name",
"1437010\t|\tBoreoeutheria\t|\t\t|\tscientific name",
"9347\t|\tEutheria\t|\t\t|\tscientific name",
"32525\t|\tTheria\t|\t\t|\tscientific name",
"40674\t|\tMammalia\t|\t\t|\tscientific name",
"32524\t|\tAmniota\t|\t\t|\tscientific name",
"32523\t|\tTetrapoda\t|\t\t|\tscientific name",
"1338369\t|\tDipnotetrapodomorpha\t|\t\t|\tscientific name",
"8287\t|\tSarcopterygii\t|\t\t|\tscientific name",
"117571\t|\tEuteleostomi\t|\t\t|\tscientific name",
"117570\t|\tTeleostomi\t|\t\t|\tscientific name",
"7776\t|\tGnathostomata\t|\t\t|\tscientific name",
"7742\t|\tVertebrata\t|\t\t|\tscientific name",
"89593\t|\tCraniata\t|\t\t|\tscientific name",
"7711\t|\tChordata\t|\t\t|\tscientific name",
"33511\t|\tDeuterostomia\t|\t\t|\tscientific name",
"33213\t|\tBilateria\t|\t\t|\tscientific name",
"6072\t|\tEumetazoa\t|\t\t|\tscientific name",
"33208\t|\tMetazoa\t|\t\t|\tscientific name",
"33154\t|\tOpisthokonta\t|\t\t|\tscientific name",
"2759\t|\tEukaryota\t|\t\t|\tscientific name",
"131567\t|\tcellular organisms\t|\t\t|\tscientific name"
)
tmpFile<-tempfile()
writeLines(namesText,tmpFile)
taxaNames<-read.names.sql(tmpFile,sqlFile)
nodesText<-c(
"1\t|\t1\t|\tno rank\t|\t\t|\t8\t|\t0\t|\t1\t|\t0\t|\t0\t|\t0\t|\t0\t|\t0\t|\t\t|",
"2\t|\t131567\t|\tsuperkingdom\t|\t\t|\t0\t|\t0\t|\t11\t|\t0\t|\t0\t|\t0\t|\t0\t|\t0\t|\t\t|",
"6\t|\t335928\t|\tgenus\t|\t\t|\t0\t|\t1\t|\t11\t|\t1\t|\t0\t|\t1\t|\t0\t|\t0\t|\t\t|",
"7\t|\t6\t|\tspecies\t|\tAC\t|\t0\t|\t1\t|\t11\t|\t1\t|\t0\t|\t1\t|\t1\t|\t0\t|\t\t|",
"9\t|\t32199\t|\tspecies\t|\tBA\t|\t0\t|\t1\t|\t11\t|\t1\t|\t0\t|\t1\t|\t1\t|\t0\t|\t\t|",
"9606\t|\t9605\t|\tspecies", "9605\t|\t207598\t|\tgenus", "207598\t|\t9604\t|\tsubfamily",
"9604\t|\t314295\t|\tfamily", "314295\t|\t9526\t|\tsuperfamily",
"9526\t|\t314293\t|\tparvorder", "314293\t|\t376913\t|\tinfraorder",
"376913\t|\t9443\t|\tsuborder", "9443\t|\t314146\t|\torder",
"314146\t|\t1437010\t|\tsuperorder", "1437010\t|\t9347\t|\tno rank",
"9347\t|\t32525\t|\tno rank", "32525\t|\t40674\t|\tno rank",
"40674\t|\t32524\t|\tclass", "32524\t|\t32523\t|\tno rank", "32523\t|\t1338369\t|\tno rank",
"1338369\t|\t8287\t|\tno rank", "8287\t|\t117571\t|\tno rank",
"117571\t|\t117570\t|\tno rank", "117570\t|\t7776\t|\tno rank",
"7776\t|\t7742\t|\tno rank", "7742\t|\t89593\t|\tno rank", "89593\t|\t7711\t|\tsubphylum",
"7711\t|\t33511\t|\tphylum", "33511\t|\t33213\t|\tno rank", "33213\t|\t6072\t|\tno rank",
"6072\t|\t33208\t|\tno rank", "33208\t|\t33154\t|\tkingdom",
"33154\t|\t2759\t|\tno rank", "2759\t|\t131567\t|\tsuperkingdom",
"131567\t|\t1\t|\tno rank"
)
writeLines(nodesText,tmpFile)
taxaNodes<-read.nodes.sql(tmpFile,sqlFile)
getTaxonomy(c(9606,9605),sqlFile)
getTaxonomy(c(9606,9605),sqlFile, desiredTaxa = c("superkingdom","kingdom"))
ranks
library(biohelper)
e
taxo_df = read_csv("~/Desktop/SEA2020_COI/DADA2_results_COI/taxo.csv") %>% column_to_rownames("representative")
taxo_df = taxo_df %>% select(-c("taxID","taxon","rank","score","superkingdom"))
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Superkingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Superkingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus", "Species"))
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Superkingdom", "Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus", "Species"))
View(t)
library(biohelper)
taxo_df = read_csv("~/Desktop/SEA2020_COI/DADA2_results_COI/taxo.csv") %>% column_to_rownames("representative")
taxo_df = taxo_df %>% select(-c("taxID","taxon","rank","score","superkingdom"))
tt = taxo_normalisation(taxo_df, sqlFile = "accessionTaxa.sql", ranks = c("superkingdom","phylum","class","order","family","genus"))
View(tt)
devtools::install_github("olar785/biohelper")
devtools::install_github("olar785/biohelper")
devtools::install_github("olar785/biohelper")
devtools::install_github("olar785/biohelper")
