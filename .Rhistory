}
# Making plot
return(ggplot(data = dft, aes(Sample, Abund, fill = pull(dft, rank2))) +
geom_bar(stat="identity",color="black") +
theme_bw() +
ylab("Relative abundance (%)") +
scale_fill_manual(values=r1Palette) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
guides(fill=guide_legend(title=paste0(str_to_title(rank1),"; ",str_to_title(rank2))))
)
}
taxo_bar_plot = function(ps_obj, rank1 = "Phylum", rank2 = "Family", n_rank1 = NA, n_rank2 = 6, x_labels = NA, colors = c("cyan", "palegreen", "yellow", "deeppink ", "white", "dodgerblue", "lightsalmon"), f_ord = NA){
n_rank1 = if(is.na(n_rank1)){
n_rank1 = length(colors)-1
}
# Creating dataframe
dfn = psmelt(ps_obj)
# Removing taxa with zero abundance
dff = dfn[dfn$Abundance>0,]
# Converting all factors to character strings
dff = dff %>% mutate_if(is.factor, as.character)
# Changing rare rank1 to 'Others'
ranks = colnames(ps_obj@tax_table@.Data %>% remove_empty("cols"))
#dff[,rank1][grepl("_X", dff[,rank1], ignore.case=FALSE)] <- "Others"
temp = dff %>% dplyr::group_by_at(which(colnames(dff)==ranks[1]):which(colnames(dff)==rank1)) %>% dplyr::summarise(rank1_Sum = sum(Abundance))
temp_2 = temp %>% arrange(desc(rank1_Sum))
temp_2 = temp_2 %>% head(n_rank1)
list_of_rare_rank1 = temp[(temp[,rank1] %>% as_vector() %>% unname()) %ni% (temp_2[,rank1] %>% as_vector() %>% unname()),rank1] %>% as_vector() %>% unname()
dff[dff[,rank1] %in% list_of_rare_rank1,rank1] = "Others"
# Changing rare families to 'Others' including those with _X...
dff[,rank2][grepl("_X", dff[,rank2], ignore.case=FALSE)] <- "Others"
temp = dff %>% dplyr::group_by_at(c(which(colnames(dff)=="OTU"), which(colnames(dff)==ranks[1]):which(colnames(dff)==ranks[length(ranks)]))) %>% dplyr::summarise(ran2_Sum = sum(Abundance)) %>% as.data.frame()
temp_3 = temp %>% arrange(desc(ran2_Sum))
temp_3 = temp %>% group_by_at(which(colnames(temp)==ranks[1]):which(colnames(temp)==rank1)) %>% slice_max(order_by = ran2_Sum, n = 5)
list_of_rare_rank2 = temp[(temp[,rank2] %>% as_vector() %>% unname()) %ni% (temp_3[,rank2] %>% as_vector() %>% unname()),]$OTU
list_of_rare_rank2 = c(list_of_rare_rank2,temp[temp[,which(colnames(temp)==rank2)]=="NA",]$OTU)
dff[dff$OTU %in% list_of_rare_rank2,rank2] = "Others"
#darken each color n times in increments of steps towards black
ExpandColors <- function(colors, n, steps = 11){
if(n <= steps){
suppressWarnings({
sapply(colors, function(x){colorRampPalette(c(x, "#000000"))(steps)}) %>%
as.data.frame() %>%
filter(row_number() <= n) %>%
gather(key = original.color, value = expanded.color)
})
}else{
warning("Select n < steps!")
}
}
r1 = unique(dff[,rank1]) %>% as.character() %>% sort()
names(r1) = r1
color_list = list()
i = 1
for (j in seq(from = 1, to = length(colors))) {
getPalette = colorRampPalette(colors[i], alpha = T)
taxaList = sort(unique(dff[(dff[,rank1] %>% as.vector() %>% unname()) == names(r1[i]),rank2] %>% as.vector() %>% unname()))
color_list[i] = list(ExpandColors(colors[i], n = length(taxaList)))
r1[i] = list(as.data.frame(color_list[i])$expanded.color)
if (!is.null(r1[[i]])) {
names(r1[[i]]) = taxaList
}
i = i+1
}
r1Palette = unlist(r1)
# Adding r1 name to r2 name
dff[,rank2] = paste0(dff[,rank1] %>% as.vector() %>% unname(),".",dff[,rank2] %>% as.vector() %>% unname())
dff = dff[order(dff[,rank2]),]
labls = unique(dff[,rank2])
names(labls) = seq(length(labls))
# Adding a labbel column
func = function(rank2){
return(names(labls[labls == rank2]))
}
dff$labls = sapply(dff[,rank2], func)
dft = dff %>% dplyr::group_by_at(which(colnames(dff) %in% c("Sample",rank2))) %>% dplyr::summarise(Abund=sum(Abundance)*100)
dff = dff[match(dft$Sample, dff$Sample),]
dft = cbind(dft, dff[,colnames(dff)%ni%colnames(dft)])
# Ordering samples
if(!is.na(f_ord)){
dft[,"Sample"] = factor(dft %>% dplyr::pull("Sample"), levels = f_ord)
dft = dft %>% dplyr::arrange("Sample")
}
# Making plot
return(ggplot(data = dft, aes(Sample, Abund, fill = pull(dft, rank2))) +
geom_bar(stat="identity",color="black") +
theme_bw() +
ylab("Relative abundance (%)") +
scale_fill_manual(values=r1Palette) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
guides(fill=guide_legend(title=paste0(str_to_title(rank1),"; ",str_to_title(rank2))))
)
}
ps_test_data_t = ps_test_data %>% tax_glom('Family') %>% microbiome::transform(transform = "compositional")
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
library(biohelper)
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
ps_test_data
load(ps_test_data)
load(ps_test_data.rda)
ps_test_data.rda
library(biohelper)
load(ps_test_data)
ps_test_data
taxa_names(ps_test_data)
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
library(biohelper)
undesiredTaxa = c("3b8f1e9447e2b3f55113dcd5d04eb152", "3efe4018e327153524ce8feb1db016ea", "3efe4018e327153524ce8feb1db016ea")
ps_test_data1 = ps_test_data %>% pop_taxa(undesiredTaxa)
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
undesiredTaxa = c("3b8f1e9447e2b3f55113dcd5d04eb152", "3efe4018e327153524ce8feb1db016ea", "3efe4018e327153524ce8feb1db016ea")
library(biohelper)
undesiredTaxa = c("3b8f1e9447e2b3f55113dcd5d04eb152", "3efe4018e327153524ce8feb1db016ea", "3efe4018e327153524ce8feb1db016ea")
ps_test_data1 = ps_test_data %>% pop_taxa(undesiredTaxa)
ps_test_data
ps_test_data1
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
library(biohelper)
undesiredTaxa = c("3b8f1e9447e2b3f55113dcd5d04eb152", "3efe4018e327153524ce8feb1db016ea", "3efe4018e327153524ce8feb1db016ea")
ps_test_data1 = ps_test_data %>% pop_taxa(undesiredTaxa)
ps_test_data1
ps_test_data
library(biohelper)
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
library(biohelper)
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
library(biohelper)
library(biohelper)
?ps_decon
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
library(biohelper)
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
library(biohelper)
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
library(biohelper)
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
library(biohelper)
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
library(biohelper)
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
library(biohelper)
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
library(biohelper)
library(biohelper)
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
use warnings()
warnings()
devtools::install_github("olar785/biohelper")
devtools::install_github("olar785/biohelper", force = TRUE)
devtools::install_github("olar785/biohelper", force = TRUE)
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
library(biohelper)
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# R packages used
packages <- c("tidyverse", "data.table","reshape2","reticulate")
packages
packages %in% rownames(installed.packages())
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
df1 = read_csv("../../../../Desktop/blatsn_taxo_assignment.csv")
df2 = read_csv("../../../../Desktop/megablast_taxo_assignment.csv")
df = taxo_merge(df1 = df1, df2 = df2, sqlFile = '/Users/olivierlaroche/Dropbox/R_scripts_N_bioinfo/Building_packages/accessionTaxa.sql', keepSAR = T)
df = taxo_merge(df1 = df1, df2 = df2, sqlFile = '/Users/olivierlaroche/Dropbox/R_scripts_N_bioinfo/Building_packages/accessionTaxa.sql', keepSAR = T, ranks = c("Superkingdom", "Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus", "Species"))
df1 = read_csv("../../../../Desktop/blatsn_taxo_assignment.csv")
df2 = read_csv("../../../../Desktop/megablast_taxo_assignment.csv")
ranks = tolower(ranks)
ranks = c("Superkingdom", "Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus", "Species")
keepSAR = T
sqlFile = '/Users/olivierlaroche/Dropbox/R_scripts_N_bioinfo/Building_packages/accessionTaxa.sql'
ranks = tolower(ranks)
colnames(df1) = colnames(df1) %>% tolower()
colnames(df1)[1]
colnames(df1)[1] = "feature_id"
df1 = taxo_normalisation(obj = df1, sqlFile = sqlFile, ranks = ranks,keepSAR = keepSAR)
df1 = taxo_normalisation(obj = df1 %>% as.data.frame(), sqlFile = sqlFile, ranks = ranks,keepSAR = keepSAR)
if("phyloseq" %in% class(obj)){
df = obj@tax_table@.Data %>% as.data.frame()
} else{
df = obj %>% as.data.frame()
}
obj=df1
if("phyloseq" %in% class(obj)){
df = obj@tax_table@.Data %>% as.data.frame()
} else{
df = obj %>% as.data.frame()
}
ranks = tolower(ranks)
colnames(df) = tolower(colnames(df))
colnames(df)
taxa_id = c("otu","otus","asv","asvs","feature_id","feature.id","nR")
taxa_id
"taxon" %in% colnames(df)
"taxonomy" %in% colnames(df)
View(obj)
df = df %>% dplyr::select(c(colnames(df)[which(colnames(df)%in%c(taxa_id,"taxonomy"))])) %>% splitstackshape::cSplit('taxonomy', sep = ';')
View(df)
if("taxon" %in% colnames(df)){
df$taxon = gsub("D_\\d+__","",taxo$taxon)
df = df %>% dplyr::select(c(colnames(df)[which(colnames(df)%in%c(taxa_id,"taxon"))])) %>% splitstackshape::cSplit('taxon', sep = ';')
}else if("taxonomy" %in% colnames(df)){
df = df %>% dplyr::select(c(colnames(df)[which(colnames(df)%in%c(taxa_id,"taxonomy"))])) %>% splitstackshape::cSplit('taxonomy', sep = ';')
}
df = df %>% mutate_if(is.factor, as.character)
df[is.na(df)]<-""
View(df)
ranks = c("Superkingdom", "Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus", "Species")
keepSAR = T
any(taxa_id %in% colnames(df))
taxa_id_df = which(colnames(df) %in% taxa_id)%>% as.numeric()
colnames(df)[taxa_id_df] = "feature_id"
any(duplicated(df)
)
rownames( df ) <- NULL
df = df %>% column_to_rownames("feature_id")
View(df)
paternsToRemove = c("^.+_environmental.+|environmental_.+|uncultured_.+|_sp\\..+|_sp.|_sp.+| sp\\..+| sp.| sp.+|_\\(.+|^.+_metagenome|_cf.")
df = df %>% mutate_all(list(~str_replace(.,paternsToRemove, ""))) %>% mutate_all(list(~na_if(.,"")))
if("species" %in% colnames(df)){
df$Species = paste0(sapply(strsplit(df$species,"_"), `[`, 1)," ", sapply(strsplit(df$species,"_"), `[`, 2))
}
df = df %>% mutate_all(list(~str_replace(.,"NA NA| NA", ""))) %>% mutate(across(everything(), gsub, pattern = "_", replacement = " ")) %>% mutate_all(list(~na_if(.,"")))
ranks_indexes = which(colnames(df) %ni% c("otu","otus","asv","asvs","feature_id","feature.id","nR"))
non_taxo_ranks = c("otu","otus","asv","asvs","feature_id","feature.id","nR")
rpt_indexes = max.col(!is.na(df[ranks_indexes]), "last")
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df[x, rpt_indexes[x]]))
res_df = data.frame("feature_id" = rownames(df), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df$id = getId(taxa = res_df$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
r = 1
# Deals with NA ids
while (r<length(ranks_indexes) & any(is.na(res_df$id))) {
df_temp = df[which(is.na(res_df$id)),]
res_df_temp = res_df[which(is.na(res_df$id)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - r
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
res_df_temp = data.frame("feature_id" = rownames(df_temp), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
id = getId(taxa = res_df_temp$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
res_df[which(is.na(res_df$id)),]$id = ifelse(!is.na(id),is,"")
r = r + 1
}
r
r = 1
r<length(ranks_indexes) & any(is.na(res_df$id))
df_temp = df[which(is.na(res_df$id)),]
View(df_temp)
res_df_temp = res_df[which(is.na(res_df$id)),]
View(res_df_temp)
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - r
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
res_df_temp = data.frame("feature_id" = rownames(df_temp), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
View(res_df_temp)
id = getId(taxa = res_df_temp$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
id
res_df[which(is.na(res_df$id)),]$id = ifelse(!is.na(id),is,"")
res_df[which(is.na(res_df$id)),]$id
ifelse(!is.na(id),is,"")
!is.na(id)
ifelse(!is.na(id),is,"")
id
!is.na(id)
res_df[which(is.na(res_df$id)),]$id = base::ifelse(!is.na(id),is,"")
dplyr::ifelse(!is.na(id),is,"")
dplyr::if_else(!is.na(id),is,"")
res_df[which(is.na(res_df$id)),]$id = ifelse(!is.na(id),is,"")
ifelse(!is.na(id),is,"")
ifelse(!is.na(id),is,"")
!is.na(id)
ifelse(!is.na(id),id,"")
r = 1
# Deals with NA ids
while (r<length(ranks_indexes) & any(is.na(res_df$id))) {
df_temp = df[which(is.na(res_df$id)),]
res_df_temp = res_df[which(is.na(res_df$id)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - r
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
res_df_temp = data.frame("feature_id" = rownames(df_temp), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
id = getId(taxa = res_df_temp$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
res_df[which(is.na(res_df$id)),]$id = ifelse(!is.na(id),id,"")
r = r + 1
}
# Deals with multiple ids
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 1
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) #####
}
#length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids again but at higher level
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
if(!is.na(any(str_detect(res_df$id, ",", negate = FALSE)))){
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id,",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 2
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
}
res_df[ranks] = getTaxonomy(res_df$id, sqlFile, desiredTaxa = str_to_lower(ranks))
res_df = res_df[,colnames(res_df) %in% c(ranks,non_taxo_ranks)]
res_df$superkingdom = res_df$superkingdom %>% replace_na("Unknown")
res_df = res_df %>% column_to_rownames("feature_id")
res_df=cbind(res_df,df[,colnames(df) %in% non_taxo_ranks,drop = FALSE])
if(keepSAR & ("kingdom" %in% ranks)){
index = which(Reduce(`|`, lapply(df[-1], grepl, pattern="SAR")))
res_df[index,]$kingdom = "SAR"
}
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
df1 = read_csv("../../../../Desktop/blatsn_taxo_assignment.csv")
df2 = read_csv("../../../../Desktop/megablast_taxo_assignment.csv")
df = taxo_merge(df1 = df1, df2 = df2, sqlFile = '/Users/olivierlaroche/Dropbox/R_scripts_N_bioinfo/Building_packages/accessionTaxa.sql', keepSAR = T, ranks = c("Superkingdom", "Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus", "Species"))
df1 = taxo_normalisation(obj = df1, sqlFile = '/Users/olivierlaroche/Dropbox/R_scripts_N_bioinfo/Building_packages/accessionTaxa.sql', ranks = c("Superkingdom", "Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus", "Species"))
df2 = taxo_normalisation(obj = df2, sqlFile = '/Users/olivierlaroche/Dropbox/R_scripts_N_bioinfo/Building_packages/accessionTaxa.sql', ranks = c("Superkingdom", "Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus", "Species"))
View(df1)
View(df2)
df = taxo_merge(df1 = df1, df2 = df2, sqlFile = '/Users/olivierlaroche/Dropbox/R_scripts_N_bioinfo/Building_packages/accessionTaxa.sql', keepSAR = T, ranks = c("Superkingdom", "Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus", "Species"))
ranks = tolower(ranks)
ranks = c("Superkingdom", "Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus", "Species")
keepSAR = T
ranks = tolower(ranks)
colnames(df1) = colnames(df1) %>% tolower()
colnames(df1)[1] = "feature_id"
df1 = taxo_normalisation(obj = df1, sqlFile = sqlFile, ranks = ranks,keepSAR = keepSAR)
sqlFile = '/Users/olivierlaroche/Dropbox/R_scripts_N_bioinfo/Building_packages/accessionTaxa.sql'
ranks = c("Superkingdom", "Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus", "Species")
keepSAR = T
colnames(df2) = colnames(df2) %>% tolower()
colnames(df2)[1] = "feature_id"
df1 = taxo_normalisation(obj = df1, sqlFile = sqlFile, ranks = ranks,keepSAR = keepSAR)
df1 = read_csv("../../../../Desktop/blatsn_taxo_assignment.csv")
df2 = read_csv("../../../../Desktop/megablast_taxo_assignment.csv")
ranks = tolower(ranks)
colnames(df1) = colnames(df1) %>% tolower()
colnames(df1)[1] = "feature_id"
df1 = taxo_normalisation(obj = df1, sqlFile = sqlFile, ranks = ranks,keepSAR = keepSAR)
ranks
keepSAR
obj = df1
if("phyloseq" %in% class(obj)){
df = obj@tax_table@.Data %>% as.data.frame()
} else{
df = obj %>% as.data.frame()
}
ranks = tolower(ranks)
colnames(df) = tolower(colnames(df))
taxa_id = c("otu","otus","asv","asvs","feature_id","feature.id","nR")
if("taxon" %in% colnames(df)){
df$taxon = gsub("D_\\d+__","",taxo$taxon)
df = df %>% dplyr::select(c(colnames(df)[which(colnames(df)%in%c(taxa_id,"taxon"))])) %>% splitstackshape::cSplit('taxon', sep = ';')
}else if("taxonomy" %in% colnames(df)){
df = df %>% dplyr::select(c(colnames(df)[which(colnames(df)%in%c(taxa_id,"taxonomy"))])) %>% splitstackshape::cSplit('taxonomy', sep = ';')
}
df = df %>% mutate_if(is.factor, as.character)
df[is.na(df)]<-""
if(any(taxa_id %in% colnames(df))){
taxa_id_df = which(colnames(df) %in% taxa_id)%>% as.numeric()
colnames(df)[taxa_id_df] = "feature_id"
if(any(duplicated(df))){
cat("Duplicated rows! Keeping the first instance only.\n")
df = df[!duplicated(df), ]
rownames( df ) <- NULL
df = df %>% column_to_rownames("feature_id")
}else{
rownames( df ) <- NULL
df = df %>% column_to_rownames("feature_id")
}
}
paternsToRemove = c("^.+_environmental.+|environmental_.+|uncultured_.+|_sp\\..+|_sp.|_sp.+| sp\\..+| sp.| sp.+|_\\(.+|^.+_metagenome|_cf.")
df = df %>% mutate_all(list(~str_replace(.,paternsToRemove, ""))) %>% mutate_all(list(~na_if(.,"")))
if("species" %in% colnames(df)){
df$Species = paste0(sapply(strsplit(df$species,"_"), `[`, 1)," ", sapply(strsplit(df$species,"_"), `[`, 2))
}
df = df %>% mutate_all(list(~str_replace(.,"NA NA| NA", ""))) %>% mutate(across(everything(), gsub, pattern = "_", replacement = " ")) %>% mutate_all(list(~na_if(.,"")))
ranks_indexes = which(colnames(df) %ni% c("otu","otus","asv","asvs","feature_id","feature.id","nR"))
non_taxo_ranks = c("otu","otus","asv","asvs","feature_id","feature.id","nR")
rpt_indexes = max.col(!is.na(df[ranks_indexes]), "last")
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df[x, rpt_indexes[x]]))
res_df = data.frame("feature_id" = rownames(df), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df$id = getId(taxa = res_df$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
r = 1
# Deals with NA ids
while (r<length(ranks_indexes) & any(is.na(res_df$id))) {
df_temp = df[which(is.na(res_df$id)),]
res_df_temp = res_df[which(is.na(res_df$id)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - r
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
res_df_temp = data.frame("feature_id" = rownames(df_temp), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
id = getId(taxa = res_df_temp$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
res_df[which(is.na(res_df$id)),]$id = ifelse(!is.na(id),id,"")
r = r + 1
}
# Deals with multiple ids
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 1
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) #####
}
#length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids again but at higher level
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
if(!is.na(any(str_detect(res_df$id, ",", negate = FALSE)))){
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id,",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 2
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
}
res_df[ranks] = getTaxonomy(res_df$id, sqlFile, desiredTaxa = str_to_lower(ranks))
res_df = res_df[,colnames(res_df) %in% c(ranks,non_taxo_ranks)]
res_df$superkingdom = res_df$superkingdom %>% replace_na("Unknown")
res_df = res_df %>% column_to_rownames("feature_id")
res_df=cbind(res_df,df[,colnames(df) %in% non_taxo_ranks,drop = FALSE])
if(keepSAR & ("kingdom" %in% ranks)){
index = which(Reduce(`|`, lapply(df[-1], grepl, pattern="SAR")))
res_df[index,]$kingdom = "SAR"
}
keepSAR
"kingdom" %in% ranks
index = which(Reduce(`|`, lapply(df[-1], grepl, pattern="SAR")))
index
which(Reduce(`|`, lapply(df[-1], grepl, pattern="SAR")))
res_df[index,]$kingdom
if(keepSAR & ("kingdom" %in% ranks)){
index = which(Reduce(`|`, lapply(df[-1], grepl, pattern="SAR")))
res_df[index,]$kingdom = "SAR"
}
index
length(index)>0
devtools::document() # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
df1 = read_csv("../../../../Desktop/blatsn_taxo_assignment.csv")
df2 = read_csv("../../../../Desktop/megablast_taxo_assignment.csv")
df = taxo_merge(df1 = df1, df2 = df2, sqlFile = '/Users/olivierlaroche/Dropbox/R_scripts_N_bioinfo/Building_packages/accessionTaxa.sql', keepSAR = T, ranks = c("Superkingdom", "Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus", "Species"))
write_csv(x = df, file = "final_taxo.csv")
Biostrings::readDNAStringSet("~/Desktop/ref_seq.fasta")
seqBiostrings::readDNAStringSet("~/Desktop/ref_seq.fasta")
seq=Biostrings::readDNAStringSet("~/Desktop/ref_seq.fasta")
seq@ranges@width %>% mean()
devtools::document(pkg = ".") # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
citation(microbiome)
library(biohelper)
citation(microbiome)
microbiome
citation('microbiome')
citation('microbiome')
citation(c('UpSetR','cowplot')
)
devtools::document(pkg = ".") # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
devtools::document(pkg = ".") # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
library(biohelper)
devtools::document(pkg = ".") # command to update documentation to package  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
library(biohelper)
library(biohelper)
packageVersion("biohelper")
