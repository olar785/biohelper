sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
df_temp = metadata %>% group_by_at(which(colnames(metadata_ext) %in% c("blank_type",groups))) %>% dplyr::count()
View(df_temp)
df_temp = metadata %>% group_by_at(which(colnames(metadata) %in% c("blank_type",groups))) %>% dplyr::count()
View(df_temp)
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
Taxo=as.data.frame(ps@tax_table@.Data); Taxo$OTU_ID = rownames(Taxo)
sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
ncol(ASV_table_ps)
#amp_type = tolower(amp_type)
#ps@sam_data$blank_type = tolower(ps@sam_data$blank_type)
ps = prune_samples(sample_sums(ps) > 0, ps) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE)
metadata = pstoveg_sample(ps) %>% dplyr::arrange(blank_type)
ASV_table_ps = pstoveg_otu(ps) %>% t() %>% as.data.frame()
ASV_table_ps = ASV_table_ps[,match(metadata$sample_id, names(ASV_table_ps))] %>% rownames_to_column('OTU_ID')
names_blanks_ps = c("OTU_ID",ps %>% subset_samples(!is.na(blank_type)) %>% sample_names())
names_samples_ps = ps %>% subset_samples(!is.na(blank_type)) %>% sample_names()
ASV_table_ps <- subset(ASV_table_ps, select=c(names_blanks_ps,names_samples_ps))
ncol(ASV_table_ps)
colnames(ASV_table_ps)
ps
ps = prune_samples(sample_sums(ps) > 0, ps) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE)
metadata = pstoveg_sample(ps) %>% dplyr::arrange(blank_type)
View(metadata)
ASV_table_ps = pstoveg_otu(ps) %>% t() %>% as.data.frame()
dim(ASV_table_ps)
ASV_table_ps = ASV_table_ps[,match(metadata$sample_id, names(ASV_table_ps))] %>% rownames_to_column('OTU_ID')
dim(ASV_table_ps)
names_blanks_ps = c("OTU_ID",ps %>% subset_samples(!is.na(blank_type)) %>% sample_names())
names_samples_ps = ps %>% subset_samples(is.na(blank_type)) %>% sample_names()
ASV_table_ps <- subset(ASV_table_ps, select=c(names_blanks_ps,names_samples_ps))
Taxo=as.data.frame(ps@tax_table@.Data); Taxo$OTU_ID = rownames(Taxo)
sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
df_temp = metadata %>% group_by_at(which(colnames(metadata) %in% c("blank_type",groups))) %>% dplyr::count()
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
runs=2
thresh = 0.7
prop.thresh = 0.00005
regression = 0
low.threshold=40
up.threshold=400
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext, taxo_ranks = colnames(Taxo)[(colnames(Taxo)!="OTU_ID")])
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = FALSE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_to_microDecon = function(ps, groups=NA, runs=2, thresh = 0.7, prop.thresh = 0.00005, regression = 0, low.threshold=40, up.threshold=400){
microDecon_2_phyloseq = function(ps_obj, env, decontaminated, taxo_ranks=NULL){
if("Mean.blank" %in% colnames(decontaminated$decon.table)){
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Mean.blank","Taxonomy")], taxa_are_rows = T)
}else{
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Taxonomy")], taxa_are_rows = T)
}
rownames(otu_table_ps) = decontaminated$decon.table$OTU_ID
if(!is.null(taxo_ranks)){
tax_ps = tax_table(decontaminated$decon.table$Taxonomy %>% colsplit(";", names = taxo_ranks))
rownames(tax_ps) = decontaminated$decon.table$OTU_ID
ps_trimmed = merge_phyloseq(otu_table_ps,tax_ps)
colnames(ps_trimmed@tax_table) = taxo_ranks
}
if(!is.null(ps_taxa_trimmed@refseq)){
# Adding back the sequences
ps_taxa_trimmed = prune_taxa(ps_trimmed %>% taxa_names(), ps_obj)
fasta_ASVs = ps_taxa_trimmed@refseq
fasta_ASVs = fasta_ASVs[match(ps_taxa_trimmed %>% taxa_names(), fasta_ASVs@ranges@NAMES),]
ps_trimmed@refseq = phyloseq::refseq(fasta_ASVs)
}
# Adding back the environmental data
env=env[rownames(env) %in% sample_names(ps_trimmed),]
env=env[match(sample_names(ps_trimmed),rownames(env)),]
sample_data(ps_trimmed) = sample_data(env)
return(ps_trimmed)
}
ps = prune_samples(sample_sums(ps) > 0, ps) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE)
metadata = pstoveg_sample(ps) %>% dplyr::arrange(blank_type)
ASV_table_ps = pstoveg_otu(ps) %>% t() %>% as.data.frame()
ASV_table_ps = ASV_table_ps[,match(metadata$sample_id, names(ASV_table_ps))] %>% rownames_to_column('OTU_ID')
names_blanks_ps = c("OTU_ID",ps %>% subset_samples(!is.na(blank_type)) %>% sample_names())
names_samples_ps = ps %>% subset_samples(is.na(blank_type)) %>% sample_names()
ASV_table_ps <- subset(ASV_table_ps, select=c(names_blanks_ps,names_samples_ps))
if(!is.null(ps@tax_table)){
Taxo=as.data.frame(ps@tax_table@.Data); Taxo$OTU_ID = rownames(Taxo)
sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
}
df_temp = metadata %>% group_by_at(which(colnames(metadata) %in% c("blank_type",groups))) %>% dplyr::count()
#MicroDecon function
if(!is.null(ps@tax_table)){
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext, taxo_ranks = colnames(Taxo)[(colnames(Taxo)!="OTU_ID")])
}else{
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = FALSE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext)
}
return(ps_trimmed)
}
ps_to_microDecon(ps_test_data, groups = "extraction_method")
ps_to_microDecon(ps, groups = "extraction_method")
ps_test_data = ps
usethis::use_data(ps_test_data,overwrite = T) # command to add data to package
ps_test_data
ps_test_data@sam_data$extraction_method
ps_to_microDecon(ps_test_data, groups = "extraction_method")
ps@sam_data$blank_type[ps@sam_data$blank_type=="",]$blank_type
ps@sam_data$blank_type[is.na(ps@sam_data$blank_type),]$blank_type
ps@sam_data$blank_type
ps@sam_data$blank_type[is.na(ps@sam_data$blank_type)]
ps@sam_data[ps@sam_data$blank_type=="sample"]
ps@sam_data[ps@sam_data$blank_type=="sample"]$blank_type
View(e)
ps@sam_data[ps@sam_data$blank_type=="pcr blank"]$blank_type
ps@sam_data[ps@sam_data$blank_type=="pcr blank",]$blank_type
ps@sam_data$blank_type=="pcr blank"
which(ps@sam_data$blank_type=="pcr blank")
ps@sam_data[which(ps@sam_data$blank_type=="pcr blank"),]$blank_type
ps_to_microDecon = function(ps, groups=NA, runs=2, thresh = 0.7, prop.thresh = 0.00005, regression = 0, low.threshold=40, up.threshold=400){
microDecon_2_phyloseq = function(ps_obj, env, decontaminated, taxo_ranks=NULL){
if("Mean.blank" %in% colnames(decontaminated$decon.table)){
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Mean.blank","Taxonomy")], taxa_are_rows = T)
}else{
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Taxonomy")], taxa_are_rows = T)
}
rownames(otu_table_ps) = decontaminated$decon.table$OTU_ID
if(!is.null(taxo_ranks)){
tax_ps = tax_table(decontaminated$decon.table$Taxonomy %>% colsplit(";", names = taxo_ranks))
rownames(tax_ps) = decontaminated$decon.table$OTU_ID
ps_trimmed = merge_phyloseq(otu_table_ps,tax_ps)
colnames(ps_trimmed@tax_table) = taxo_ranks
}
if(!is.null(ps_taxa_trimmed@refseq)){
# Adding back the sequences
ps_taxa_trimmed = prune_taxa(ps_trimmed %>% taxa_names(), ps_obj)
fasta_ASVs = ps_taxa_trimmed@refseq
fasta_ASVs = fasta_ASVs[match(ps_taxa_trimmed %>% taxa_names(), fasta_ASVs@ranges@NAMES),]
ps_trimmed@refseq = phyloseq::refseq(fasta_ASVs)
}
# Adding back the environmental data
env=env[rownames(env) %in% sample_names(ps_trimmed),]
env=env[match(sample_names(ps_trimmed),rownames(env)),]
sample_data(ps_trimmed) = sample_data(env)
return(ps_trimmed)
}
ps = prune_samples(sample_sums(ps) > 0, ps) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE)
ps@sam_data[which(ps@sam_data$blank_type=="NA"),]$blank_type = NA;ps@sam_data[which(ps@sam_data$blank_type=="na"),]$blank_type = NA;ps@sam_data[which(ps@sam_data$blank_type==""),]$blank_type = NA;ps@sam_data[which(ps@sam_data$blank_type=="NaN"),]$blank_type = NA
metadata = pstoveg_sample(ps) %>% dplyr::arrange(blank_type)
ASV_table_ps = pstoveg_otu(ps) %>% t() %>% as.data.frame()
ASV_table_ps = ASV_table_ps[,match(metadata$sample_id, names(ASV_table_ps))] %>% rownames_to_column('OTU_ID')
names_blanks_ps = c("OTU_ID",ps %>% subset_samples(!is.na(blank_type)) %>% sample_names())
names_samples_ps = ps %>% subset_samples(is.na(blank_type)) %>% sample_names()
ASV_table_ps <- subset(ASV_table_ps, select=c(names_blanks_ps,names_samples_ps))
if(!is.null(ps@tax_table)){
Taxo=as.data.frame(ps@tax_table@.Data); Taxo$OTU_ID = rownames(Taxo)
sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
}
df_temp = metadata %>% group_by_at(which(colnames(metadata) %in% c("blank_type",groups))) %>% dplyr::count()
#MicroDecon function
if(!is.null(ps@tax_table)){
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext, taxo_ranks = colnames(Taxo)[(colnames(Taxo)!="OTU_ID")])
}else{
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = FALSE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext)
}
return(ps_trimmed)
}
ps_to_microDecon(ps_test_data, groups = "extraction_method")
ps@sam_data[which(ps@sam_data$blank_type=="NA"),]$blank_type = NA
ps@sam_data[which(ps@sam_data$blank_type=="NA"),]$blank_type = NA
ps@sam_data$blank_type
str_replace(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA)
ps@sam_data$blank_type = str_replace(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
ps@sam_data$blank_type
str_replace(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
str_replace_all(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
ps_to_microDecon = function(ps, groups=NA, runs=2, thresh = 0.7, prop.thresh = 0.00005, regression = 0, low.threshold=40, up.threshold=400){
microDecon_2_phyloseq = function(ps_obj, env, decontaminated, taxo_ranks=NULL){
if("Mean.blank" %in% colnames(decontaminated$decon.table)){
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Mean.blank","Taxonomy")], taxa_are_rows = T)
}else{
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Taxonomy")], taxa_are_rows = T)
}
rownames(otu_table_ps) = decontaminated$decon.table$OTU_ID
if(!is.null(taxo_ranks)){
tax_ps = tax_table(decontaminated$decon.table$Taxonomy %>% colsplit(";", names = taxo_ranks))
rownames(tax_ps) = decontaminated$decon.table$OTU_ID
ps_trimmed = merge_phyloseq(otu_table_ps,tax_ps)
colnames(ps_trimmed@tax_table) = taxo_ranks
}
if(!is.null(ps_taxa_trimmed@refseq)){
# Adding back the sequences
ps_taxa_trimmed = prune_taxa(ps_trimmed %>% taxa_names(), ps_obj)
fasta_ASVs = ps_taxa_trimmed@refseq
fasta_ASVs = fasta_ASVs[match(ps_taxa_trimmed %>% taxa_names(), fasta_ASVs@ranges@NAMES),]
ps_trimmed@refseq = phyloseq::refseq(fasta_ASVs)
}
# Adding back the environmental data
env=env[rownames(env) %in% sample_names(ps_trimmed),]
env=env[match(sample_names(ps_trimmed),rownames(env)),]
sample_data(ps_trimmed) = sample_data(env)
return(ps_trimmed)
}
ps = prune_samples(sample_sums(ps) > 0, ps) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE)
ps@sam_data$blank_type = str_replace_all(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
metadata = pstoveg_sample(ps) %>% dplyr::arrange(blank_type)
ASV_table_ps = pstoveg_otu(ps) %>% t() %>% as.data.frame()
ASV_table_ps = ASV_table_ps[,match(metadata$sample_id, names(ASV_table_ps))] %>% rownames_to_column('OTU_ID')
names_blanks_ps = c("OTU_ID",ps %>% subset_samples(!is.na(blank_type)) %>% sample_names())
names_samples_ps = ps %>% subset_samples(is.na(blank_type)) %>% sample_names()
ASV_table_ps <- subset(ASV_table_ps, select=c(names_blanks_ps,names_samples_ps))
if(!is.null(ps@tax_table)){
Taxo=as.data.frame(ps@tax_table@.Data); Taxo$OTU_ID = rownames(Taxo)
sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
}
df_temp = metadata %>% group_by_at(which(colnames(metadata) %in% c("blank_type",groups))) %>% dplyr::count()
#MicroDecon function
if(!is.null(ps@tax_table)){
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext, taxo_ranks = colnames(Taxo)[(colnames(Taxo)!="OTU_ID")])
}else{
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = FALSE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext)
}
return(ps_trimmed)
}
ps_to_microDecon(ps_test_data, groups = "extraction_method")
t=ps_to_microDecon(ps_test_data, groups = "extraction_method")
tt=t@tax_table@.Data %>% as.data.frame()
View(tt)
ps_to_microDecon = function(ps, groups=NA, runs=2, thresh = 0.7, prop.thresh = 0.00005, regression = 0, low.threshold=40, up.threshold=400){
microDecon_2_phyloseq = function(ps_obj, env, decontaminated, taxo_ranks=NULL){
if("Mean.blank" %in% colnames(decontaminated$decon.table)){
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Mean.blank","Taxonomy")], taxa_are_rows = T)
}else{
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Taxonomy")], taxa_are_rows = T)
}
rownames(otu_table_ps) = decontaminated$decon.table$OTU_ID
if(!is.null(taxo_ranks)){
tax_ps = tax_table(decontaminated$decon.table$Taxonomy %>% colsplit(";", names = taxo_ranks))
rownames(tax_ps) = decontaminated$decon.table$OTU_ID
ps_trimmed = merge_phyloseq(otu_table_ps,tax_ps)
colnames(ps_trimmed@tax_table) = taxo_ranks
}
if(!is.null(ps_taxa_trimmed@refseq)){
# Adding back the sequences
ps_taxa_trimmed = prune_taxa(ps_trimmed %>% taxa_names(), ps_obj)
fasta_ASVs = ps_taxa_trimmed@refseq
fasta_ASVs = fasta_ASVs[match(ps_taxa_trimmed %>% taxa_names(), fasta_ASVs@ranges@NAMES),]
ps_trimmed@refseq = phyloseq::refseq(fasta_ASVs)
}
# Adding back the environmental data
env=env[rownames(env) %in% sample_names(ps_trimmed),]
env=env[match(sample_names(ps_trimmed),rownames(env)),]
sample_data(ps_trimmed) = sample_data(env)
return(ps_trimmed)
}
ps = prune_samples(sample_sums(ps) > 0, ps) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE)
ps@sam_data$blank_type = str_replace_all(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
metadata = pstoveg_sample(ps) %>% dplyr::arrange(blank_type)
ASV_table_ps = pstoveg_otu(ps) %>% t() %>% as.data.frame()
ASV_table_ps = ASV_table_ps[,match(metadata$sample_id, names(ASV_table_ps))] %>% rownames_to_column('OTU_ID')
names_blanks_ps = c("OTU_ID",ps %>% subset_samples(!is.na(blank_type)) %>% sample_names())
names_samples_ps = ps %>% subset_samples(is.na(blank_type)) %>% sample_names()
ASV_table_ps <- subset(ASV_table_ps, select=c(names_blanks_ps,names_samples_ps))
if(!is.null(ps@tax_table)){
Taxo=as.data.frame(ps@tax_table@.Data); Taxo$OTU_ID = rownames(Taxo)
sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
}
df_temp = metadata %>% group_by_at(which(colnames(metadata) %in% c("blank_type",groups))) %>% dplyr::count()
#MicroDecon function
if(!is.null(ps@tax_table)){
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext, taxo_ranks = colnames(Taxo)[(colnames(Taxo)!="OTU_ID")])
}else{
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = FALSE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext)
}
# Printing results
ntaxa_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% ntaxa()
ntaxa_after = ntaxa(ps_trimmed)
cat("\nContamination look-up in samples with MicroDecon\n")
cat(paste0("Number of ASVs totally removed: ",ntaxa_before - ntaxa_after))
cat(paste0("Percent of ASVs removed: ",round((1 - (ntaxa_after / ntaxa_before)) * 100,2), " %"))
reads_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
reads_after = ps_trimmed %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
cat(paste0("Total number of reads  removed: ",reads_before - reads_after))
cat("\nPercent of reads removed: ",paste0(round((1 - (reads_after / reads_before)) * 100,2)," %"))
return(ps_trimmed)
}
ps_to_microDecon(ps_test_data, groups = "extraction_method")
ps_to_microDecon = function(ps, groups=NA, runs=2, thresh = 0.7, prop.thresh = 0.00005, regression = 0, low.threshold=40, up.threshold=400){
microDecon_2_phyloseq = function(ps_obj, env, decontaminated, taxo_ranks=NULL){
if("Mean.blank" %in% colnames(decontaminated$decon.table)){
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Mean.blank","Taxonomy")], taxa_are_rows = T)
}else{
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Taxonomy")], taxa_are_rows = T)
}
rownames(otu_table_ps) = decontaminated$decon.table$OTU_ID
if(!is.null(taxo_ranks)){
tax_ps = tax_table(decontaminated$decon.table$Taxonomy %>% colsplit(";", names = taxo_ranks))
rownames(tax_ps) = decontaminated$decon.table$OTU_ID
ps_trimmed = merge_phyloseq(otu_table_ps,tax_ps)
colnames(ps_trimmed@tax_table) = taxo_ranks
}
if(!is.null(ps_taxa_trimmed@refseq)){
# Adding back the sequences
ps_taxa_trimmed = prune_taxa(ps_trimmed %>% taxa_names(), ps_obj)
fasta_ASVs = ps_taxa_trimmed@refseq
fasta_ASVs = fasta_ASVs[match(ps_taxa_trimmed %>% taxa_names(), fasta_ASVs@ranges@NAMES),]
ps_trimmed@refseq = phyloseq::refseq(fasta_ASVs)
}
# Adding back the environmental data
env=env[rownames(env) %in% sample_names(ps_trimmed),]
env=env[match(sample_names(ps_trimmed),rownames(env)),]
sample_data(ps_trimmed) = sample_data(env)
return(ps_trimmed)
}
ps = prune_samples(sample_sums(ps) > 0, ps) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE)
ps@sam_data$blank_type = str_replace_all(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
metadata = pstoveg_sample(ps) %>% dplyr::arrange(blank_type)
ASV_table_ps = pstoveg_otu(ps) %>% t() %>% as.data.frame()
ASV_table_ps = ASV_table_ps[,match(metadata$sample_id, names(ASV_table_ps))] %>% rownames_to_column('OTU_ID')
names_blanks_ps = c("OTU_ID",ps %>% subset_samples(!is.na(blank_type)) %>% sample_names())
names_samples_ps = ps %>% subset_samples(is.na(blank_type)) %>% sample_names()
ASV_table_ps <- subset(ASV_table_ps, select=c(names_blanks_ps,names_samples_ps))
if(!is.null(ps@tax_table)){
Taxo=as.data.frame(ps@tax_table@.Data); Taxo$OTU_ID = rownames(Taxo)
sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
}
df_temp = metadata %>% group_by_at(which(colnames(metadata) %in% c("blank_type",groups))) %>% dplyr::count()
#MicroDecon function
if(!is.null(ps@tax_table)){
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext, taxo_ranks = colnames(Taxo)[(colnames(Taxo)!="OTU_ID")])
}else{
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = FALSE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext)
}
# Printing results
ntaxa_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% ntaxa()
ntaxa_after = ntaxa(ps_trimmed)
cat("\nContamination look-up in samples with MicroDecon\n")
cat(paste0("Number of ASVs totally removed: ",ntaxa_before - ntaxa_after))
cat("\n")
cat(paste0("Percent of ASVs removed: ",round((1 - (ntaxa_after / ntaxa_before)) * 100,2), " %"))
cat("\n")
reads_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
reads_after = ps_trimmed %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
cat(paste0("Total number of reads  removed: ",reads_before - reads_after))
cat("\n")
cat("\nPercent of reads removed: ",paste0(round((1 - (reads_after / reads_before)) * 100,2)," %"))
return(ps_trimmed)
}
ps_to_microDecon(ps_test_data, groups = "extraction_method")
ps_to_microDecon = function(ps, groups=NA, runs=2, thresh = 0.7, prop.thresh = 0.00005, regression = 0, low.threshold=40, up.threshold=400){
microDecon_2_phyloseq = function(ps_obj, env, decontaminated, taxo_ranks=NULL){
if("Mean.blank" %in% colnames(decontaminated$decon.table)){
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Mean.blank","Taxonomy")], taxa_are_rows = T)
}else{
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Taxonomy")], taxa_are_rows = T)
}
rownames(otu_table_ps) = decontaminated$decon.table$OTU_ID
if(!is.null(taxo_ranks)){
tax_ps = tax_table(decontaminated$decon.table$Taxonomy %>% colsplit(";", names = taxo_ranks))
rownames(tax_ps) = decontaminated$decon.table$OTU_ID
ps_trimmed = merge_phyloseq(otu_table_ps,tax_ps)
colnames(ps_trimmed@tax_table) = taxo_ranks
}
if(!is.null(ps_taxa_trimmed@refseq)){
# Adding back the sequences
ps_taxa_trimmed = prune_taxa(ps_trimmed %>% taxa_names(), ps_obj)
fasta_ASVs = ps_taxa_trimmed@refseq
fasta_ASVs = fasta_ASVs[match(ps_taxa_trimmed %>% taxa_names(), fasta_ASVs@ranges@NAMES),]
ps_trimmed@refseq = phyloseq::refseq(fasta_ASVs)
}
# Adding back the environmental data
env=env[rownames(env) %in% sample_names(ps_trimmed),]
env=env[match(sample_names(ps_trimmed),rownames(env)),]
sample_data(ps_trimmed) = sample_data(env)
return(ps_trimmed %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE))
}
ps = prune_samples(sample_sums(ps) > 0, ps) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE)
ps@sam_data$blank_type = str_replace_all(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
metadata = pstoveg_sample(ps) %>% dplyr::arrange(blank_type)
ASV_table_ps = pstoveg_otu(ps) %>% t() %>% as.data.frame()
ASV_table_ps = ASV_table_ps[,match(metadata$sample_id, names(ASV_table_ps))] %>% rownames_to_column('OTU_ID')
names_blanks_ps = c("OTU_ID",ps %>% subset_samples(!is.na(blank_type)) %>% sample_names())
names_samples_ps = ps %>% subset_samples(is.na(blank_type)) %>% sample_names()
ASV_table_ps <- subset(ASV_table_ps, select=c(names_blanks_ps,names_samples_ps))
if(!is.null(ps@tax_table)){
Taxo=as.data.frame(ps@tax_table@.Data); Taxo$OTU_ID = rownames(Taxo)
sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
}
df_temp = metadata %>% group_by_at(which(colnames(metadata) %in% c("blank_type",groups))) %>% dplyr::count()
#MicroDecon function
if(!is.null(ps@tax_table)){
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext, taxo_ranks = colnames(Taxo)[(colnames(Taxo)!="OTU_ID")])
}else{
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = FALSE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext)
}
# Printing results
ntaxa_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% ntaxa()
ntaxa_after = ntaxa(ps_trimmed)
cat("\nContamination look-up in samples with MicroDecon\n")
cat(paste0("Number of ASVs totally removed: ",ntaxa_before - ntaxa_after))
cat("\n")
cat(paste0("Percent of ASVs removed: ",round((1 - (ntaxa_after / ntaxa_before)) * 100,2), " %"))
cat("\n")
reads_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
reads_after = ps_trimmed %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
cat(paste0("Total number of reads  removed: ",reads_before - reads_after))
cat("\n")
cat("\nPercent of reads removed: ",paste0(round((1 - (reads_after / reads_before)) * 100,2)," %"))
cat("\n")
return(ps_trimmed)
}
ps_to_microDecon(ps_test_data, groups = "extraction_method")
ps_to_microDecon = function(ps, groups=NA, runs=2, thresh = 0.7, prop.thresh = 0.00005, regression = 0, low.threshold=40, up.threshold=400){
microDecon_2_phyloseq = function(ps_obj, env, decontaminated, taxo_ranks=NULL){
if("Mean.blank" %in% colnames(decontaminated$decon.table)){
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Mean.blank","Taxonomy")], taxa_are_rows = T)
}else{
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Taxonomy")], taxa_are_rows = T)
}
rownames(otu_table_ps) = decontaminated$decon.table$OTU_ID
if(!is.null(taxo_ranks)){
tax_ps = tax_table(decontaminated$decon.table$Taxonomy %>% colsplit(";", names = taxo_ranks))
rownames(tax_ps) = decontaminated$decon.table$OTU_ID
ps_trimmed = merge_phyloseq(otu_table_ps,tax_ps)
colnames(ps_trimmed@tax_table) = taxo_ranks
}
if(!is.null(ps_taxa_trimmed@refseq)){
# Adding back the sequences
ps_taxa_trimmed = prune_taxa(ps_trimmed %>% taxa_names(), ps_obj)
fasta_ASVs = ps_taxa_trimmed@refseq
fasta_ASVs = fasta_ASVs[match(ps_taxa_trimmed %>% taxa_names(), fasta_ASVs@ranges@NAMES),]
ps_trimmed@refseq = phyloseq::refseq(fasta_ASVs)
}
# Adding back the environmental data
env=env[rownames(env) %in% sample_names(ps_trimmed),]
env=env[match(sample_names(ps_trimmed),rownames(env)),]
sample_data(ps_trimmed) = sample_data(env)
return(ps_trimmed %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE))
}
ps = prune_samples(sample_sums(ps) > 0, ps) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE)
ps@sam_data$blank_type = str_replace_all(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
metadata = pstoveg_sample(ps) %>% dplyr::arrange(blank_type)
ASV_table_ps = pstoveg_otu(ps) %>% t() %>% as.data.frame()
ASV_table_ps = ASV_table_ps[,match(metadata$sample_id, names(ASV_table_ps))] %>% rownames_to_column('OTU_ID')
names_blanks_ps = c("OTU_ID",ps %>% subset_samples(!is.na(blank_type)) %>% sample_names())
names_samples_ps = ps %>% subset_samples(is.na(blank_type)) %>% sample_names()
ASV_table_ps <- subset(ASV_table_ps, select=c(names_blanks_ps,names_samples_ps))
if(!is.null(ps@tax_table)){
Taxo=as.data.frame(ps@tax_table@.Data); Taxo$OTU_ID = rownames(Taxo)
sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
}
df_temp = metadata %>% group_by_at(which(colnames(metadata) %in% c("blank_type",groups))) %>% dplyr::count()
#MicroDecon function
if(!is.null(ps@tax_table)){
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext, taxo_ranks = colnames(Taxo)[(colnames(Taxo)!="OTU_ID")])
}else{
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = FALSE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext)
}
# Printing results
ntaxa_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% ntaxa()
ntaxa_after = ntaxa(ps_trimmed)
cat("\nContamination look-up in samples with MicroDecon\n")
cat(paste0("Number of ASVs totally removed: ",ntaxa_before - ntaxa_after))
cat("\n")
cat(paste0("Percent of ASVs removed: ",round((1 - (ntaxa_after / ntaxa_before)) * 100,2), " %"))
cat("\n")
reads_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
reads_after = ps_trimmed %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
cat(paste0("Total number of reads  removed: ",reads_before - reads_after))
cat("\nPercent of reads removed: ",paste0(round((1 - (reads_after / reads_before)) * 100,2)," %"))
cat("\n")
return(ps_trimmed)
}
ps_to_microDecon(ps_test_data, groups = "extraction_method")
t=ps_to_microDecon(ps_test_data, groups = "extraction_method")
devtools::document() # coomand to update documantation to package
library(biohelper)
ps=ps_test_data
ps@sam_data$blank_type
ps@sam_data$extraction_method
library(biohelper)
ps_to_microDecon(ps_test_data, groups = "extraction_method")
NAs_to_Xs(ps_test_data@tax_table@.Data %>% as.data.frame()) %>% head()
NAs_to_Xs(ps_test_data@tax_table@.Data %>% as.data.frame())
NAs_to_Xs(ps_test_data@tax_table@.Data %>% as.data.frame()) %>% View()
devtools::document() # coomand to update documantation to package
library(biohelper)
