df = df %>% mutate_all(list(~str_replace(.,paternsToRemove, ""))) %>% mutate_all(list(~na_if(.,"")))
if("species" %in% tolower(colnames(df))){
df$Species = paste0(sapply(strsplit(df$Species,"_"), `[`, 1)," ", sapply(strsplit(df$Species,"_"), `[`, 2))
}
df = df %>% mutate_all(list(~str_replace(.,"NA NA| NA", ""))) %>% mutate(across(everything(), gsub, pattern = "_", replacement = " ")) %>% mutate_all(list(~na_if(.,"")))
ranks_indexes = which(tolower(colnames(df)) %in% ranks)
non_taxo_ranks = c("otu","otus","OTU","OTUs","OTUS","asv","asvs","ASVs","ASV","ASVS","nR")
rpt_indexes = max.col(!is.na(df[colnames(df)%ni%non_taxo_ranks]), "last")
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df[x, rpt_indexes[x]]))
res_df = data.frame("ASV" = rownames(df), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df$id = getId(taxa = res_df$taxa, sqlFile = sqlFile, onlyScientific = TRUE) ###############################################
length(res_df[which(is.na(res_df$id)),]$id)
r = 1
# Deals with NA ids
while (r<length(ranks_indexes) & any(is.na(res_df$id))) {
df_temp = df[which(is.na(res_df$id)),]
res_df_temp = res_df[which(is.na(res_df$id)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - r
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
res_df_temp = data.frame("ASV" = rownames(df_temp), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df[which(is.na(res_df$id)),]$id = getId(taxa = res_df_temp$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
length(res_df[which(is.na(res_df$id)),]$id)
r = r + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 1
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids again but at higher level
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
if(!is.na(any(str_detect(res_df$id, ",", negate = FALSE))))
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 2
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
res_df[ranks] = getTaxonomy(res_df$id, sqlFile, desiredTaxa = ranks)
res_df = res_df[,colnames(res_df) %in% c(ranks,non_taxo_ranks)]
res_df$superkingdom = res_df$superkingdom %>% replace_na("Unknown")
res_df$superkingdom = res_df$superkingdom %>% replace_na("Unknown")
df=taxo_df
df[df==""]<-NA
paternsToRemove = c("^.+_environmental.+|environmental_.+|uncultured_.+|_sp\\..+|_sp.|_sp.+| sp\\..+| sp.| sp.+|_\\(.+|^.+_metagenome|_cf.")
df = df %>% mutate_all(list(~str_replace(.,paternsToRemove, ""))) %>% mutate_all(list(~na_if(.,"")))
if("species" %in% tolower(colnames(df))){
df$Species = paste0(sapply(strsplit(df$Species,"_"), `[`, 1)," ", sapply(strsplit(df$Species,"_"), `[`, 2))
}
df = df %>% mutate_all(list(~str_replace(.,"NA NA| NA", ""))) %>% mutate(across(everything(), gsub, pattern = "_", replacement = " ")) %>% mutate_all(list(~na_if(.,"")))
ranks_indexes = which(tolower(colnames(df)) %in% ranks)
non_taxo_ranks = c("otu","otus","OTU","OTUs","OTUS","asv","asvs","ASVs","ASV","ASVS","nR")
rpt_indexes = max.col(!is.na(df[colnames(df)%ni%non_taxo_ranks]), "last")
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df[x, rpt_indexes[x]]))
res_df = data.frame("ASV" = rownames(df), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df$id = getId(taxa = res_df$taxa, sqlFile = sqlFile, onlyScientific = TRUE) ###############################################
length(res_df[which(is.na(res_df$id)),]$id)
r = 1
# Deals with NA ids
while (r<length(ranks_indexes) & any(is.na(res_df$id))) {
df_temp = df[which(is.na(res_df$id)),]
res_df_temp = res_df[which(is.na(res_df$id)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - r
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
res_df_temp = data.frame("ASV" = rownames(df_temp), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df[which(is.na(res_df$id)),]$id = getId(taxa = res_df_temp$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
length(res_df[which(is.na(res_df$id)),]$id)
r = r + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 1
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids again but at higher level
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
if(!is.na(any(str_detect(res_df$id, ",", negate = FALSE))))
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 2
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
res_df[ranks] = getTaxonomy(res_df$id, sqlFile, desiredTaxa = ranks)
ranks
res_df[ranks] = getTaxonomy(res_df$id, sqlFile, desiredTaxa = str_to_lower(ranks))
ranks=c("superkingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus")
res_df[ranks] = getTaxonomy(res_df$id, sqlFile, desiredTaxa = str_to_lower(ranks))
ranks=c("Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus")
str_to_lower("Kingdom") %in% ranks
"kingdom" %in% str_to_lower(ranks)
ranks[str_to_lower("Kingdom"]
ranks[str_to_lower("Kingdom")]
str_to_lower(ranks)["kingdom"]
str_to_lower(ranks)["kingdom"]
str_to_lower(ranks)
ranks["kingdom"]
ranks = str_to_lower(ranks)
ranks
ranks = str_to_lower(ranks)
ranks
ranks["kingdom"]
ranks
ranks[["kingdom"]]
ranks[["kingdom"]]
ranks
ranks["kingdom"] = "superkingdom"
ranksranks
ranks
ranks=c("Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus")
ranks = str_to_lower(ranks)
ranks
ranks["kingdom"]
ranks[["kingdom"]]
ranks[ranks == "kingdom"]
ranks[ranks == "kingdom"] = "superkingdom"
ranks
ranks=c("Kingdom","Phylum","Class","Order","Family","Genus")
ranks = str_to_lower(ranks)
if("kingdom" %in% ranks){
ranks[ranks == "kingdom"] = "superkingdom"
}
ranks
df=taxo_df
ranks = str_to_lower(ranks)
if("kingdom" %in% ranks){
ranks[ranks == "kingdom"] = "superkingdom"
}
df[df==""]<-NA
paternsToRemove = c("^.+_environmental.+|environmental_.+|uncultured_.+|_sp\\..+|_sp.|_sp.+| sp\\..+| sp.| sp.+|_\\(.+|^.+_metagenome|_cf.")
df = df %>% mutate_all(list(~str_replace(.,paternsToRemove, ""))) %>% mutate_all(list(~na_if(.,"")))
if("species" %in% tolower(colnames(df))){
df$Species = paste0(sapply(strsplit(df$Species,"_"), `[`, 1)," ", sapply(strsplit(df$Species,"_"), `[`, 2))
}
df = df %>% mutate_all(list(~str_replace(.,"NA NA| NA", ""))) %>% mutate(across(everything(), gsub, pattern = "_", replacement = " ")) %>% mutate_all(list(~na_if(.,"")))
ranks_indexes = which(tolower(colnames(df)) %in% ranks)
non_taxo_ranks = c("otu","otus","OTU","OTUs","OTUS","asv","asvs","ASVs","ASV","ASVS","nR")
rpt_indexes = max.col(!is.na(df[colnames(df)%ni%non_taxo_ranks]), "last")
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df[x, rpt_indexes[x]]))
res_df = data.frame("ASV" = rownames(df), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df$id = getId(taxa = res_df$taxa, sqlFile = sqlFile, onlyScientific = TRUE) ###############################################
length(res_df[which(is.na(res_df$id)),]$id)
r = 1
# Deals with NA ids
while (r<length(ranks_indexes) & any(is.na(res_df$id))) {
df_temp = df[which(is.na(res_df$id)),]
res_df_temp = res_df[which(is.na(res_df$id)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - r
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
res_df_temp = data.frame("ASV" = rownames(df_temp), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df[which(is.na(res_df$id)),]$id = getId(taxa = res_df_temp$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
length(res_df[which(is.na(res_df$id)),]$id)
r = r + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 1
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids again but at higher level
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
if(!is.na(any(str_detect(res_df$id, ",", negate = FALSE))))
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 2
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
res_df[ranks] = getTaxonomy(res_df$id, sqlFile, desiredTaxa = str_to_lower(ranks))
res_df = res_df[,colnames(res_df) %in% c(ranks,non_taxo_ranks)]
res_df$superkingdom = res_df$superkingdom %>% replace_na("Unknown")
res_df = res_df %>% column_to_rownames("ASV")
res_df=cbind(res_df,df[,colnames(df) %in% non_taxo_ranks,drop = FALSE])
taxo_normalisation = function(df, sqlFile, ranks =c("superkingdom","phylum","class","order","family","genus","species")){
ranks = str_to_lower(ranks)
if("kingdom" %in% ranks){
ranks[ranks == "kingdom"] = "superkingdom"
}
df[df==""]<-NA
paternsToRemove = c("^.+_environmental.+|environmental_.+|uncultured_.+|_sp\\..+|_sp.|_sp.+| sp\\..+| sp.| sp.+|_\\(.+|^.+_metagenome|_cf.")
df = df %>% mutate_all(list(~str_replace(.,paternsToRemove, ""))) %>% mutate_all(list(~na_if(.,"")))
if("species" %in% tolower(colnames(df))){
df$Species = paste0(sapply(strsplit(df$Species,"_"), `[`, 1)," ", sapply(strsplit(df$Species,"_"), `[`, 2))
}
df = df %>% mutate_all(list(~str_replace(.,"NA NA| NA", ""))) %>% mutate(across(everything(), gsub, pattern = "_", replacement = " ")) %>% mutate_all(list(~na_if(.,"")))
ranks_indexes = which(tolower(colnames(df)) %in% ranks)
non_taxo_ranks = c("otu","otus","OTU","OTUs","OTUS","asv","asvs","ASVs","ASV","ASVS","nR")
rpt_indexes = max.col(!is.na(df[colnames(df)%ni%non_taxo_ranks]), "last")
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df[x, rpt_indexes[x]]))
res_df = data.frame("ASV" = rownames(df), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df$id = getId(taxa = res_df$taxa, sqlFile = sqlFile, onlyScientific = TRUE) ###############################################
length(res_df[which(is.na(res_df$id)),]$id)
r = 1
# Deals with NA ids
while (r<length(ranks_indexes) & any(is.na(res_df$id))) {
df_temp = df[which(is.na(res_df$id)),]
res_df_temp = res_df[which(is.na(res_df$id)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - r
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
res_df_temp = data.frame("ASV" = rownames(df_temp), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df[which(is.na(res_df$id)),]$id = getId(taxa = res_df_temp$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
length(res_df[which(is.na(res_df$id)),]$id)
r = r + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 1
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids again but at higher level
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
if(!is.na(any(str_detect(res_df$id, ",", negate = FALSE))))
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 2
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
res_df[ranks] = getTaxonomy(res_df$id, sqlFile, desiredTaxa = str_to_lower(ranks))
res_df = res_df[,colnames(res_df) %in% c(ranks,non_taxo_ranks)]
res_df$superkingdom = res_df$superkingdom %>% replace_na("Unknown")
res_df = res_df %>% column_to_rownames("ASV")
res_df=cbind(res_df,df[,colnames(df) %in% non_taxo_ranks,drop = FALSE])
return(res_df)
}
data("ps_test_data")
taxo_df = ps_test_data@tax_table@.Data %>% as.data.frame()
taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
test = taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
View(test)
"asv" %in% str_to_lower(colnames(df)
)
colnames(df) = str_to_lower(colnames(df))
taxo_df = ps_test_data@tax_table@.Data %>% as.data.frame()
taxo_df = ps_test_data@tax_table@.Data %>% as.data.frame()
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
View(t)
taxo_df = ps_test_data@tax_table@.Data %>% as.data.frame() %>% rownames_to_column("ASV")
taxo_normalisation = function(df, sqlFile = "accessionTaxa.sql", ranks =c("superkingdom","phylum","class","order","family","genus","species")){
ranks = str_to_lower(ranks)
colnames(df) = str_to_lower(colnames(df))
if("kingdom" %in% ranks){
ranks[ranks == "kingdom"] = "superkingdom"
}
if("asv" %in% colnames(df)){
df = df %>% column_to_rownames("asv")
}
df[df==""]<-NA
paternsToRemove = c("^.+_environmental.+|environmental_.+|uncultured_.+|_sp\\..+|_sp.|_sp.+| sp\\..+| sp.| sp.+|_\\(.+|^.+_metagenome|_cf.")
df = df %>% mutate_all(list(~str_replace(.,paternsToRemove, ""))) %>% mutate_all(list(~na_if(.,"")))
if("species" %in% tolower(colnames(df))){
df$Species = paste0(sapply(strsplit(df$Species,"_"), `[`, 1)," ", sapply(strsplit(df$Species,"_"), `[`, 2))
}
df = df %>% mutate_all(list(~str_replace(.,"NA NA| NA", ""))) %>% mutate(across(everything(), gsub, pattern = "_", replacement = " ")) %>% mutate_all(list(~na_if(.,"")))
ranks_indexes = which(tolower(colnames(df)) %in% ranks)
non_taxo_ranks = c("otu","otus","OTU","OTUs","OTUS","asv","asvs","ASVs","ASV","ASVS","nR")
rpt_indexes = max.col(!is.na(df[colnames(df)%ni%non_taxo_ranks]), "last")
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df[x, rpt_indexes[x]]))
res_df = data.frame("ASV" = rownames(df), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df$id = getId(taxa = res_df$taxa, sqlFile = sqlFile, onlyScientific = TRUE) ###############################################
length(res_df[which(is.na(res_df$id)),]$id)
r = 1
# Deals with NA ids
while (r<length(ranks_indexes) & any(is.na(res_df$id))) {
df_temp = df[which(is.na(res_df$id)),]
res_df_temp = res_df[which(is.na(res_df$id)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - r
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
res_df_temp = data.frame("ASV" = rownames(df_temp), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df[which(is.na(res_df$id)),]$id = getId(taxa = res_df_temp$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
length(res_df[which(is.na(res_df$id)),]$id)
r = r + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 1
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids again but at higher level
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
if(!is.na(any(str_detect(res_df$id, ",", negate = FALSE))))
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 2
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
res_df[ranks] = getTaxonomy(res_df$id, sqlFile, desiredTaxa = str_to_lower(ranks))
res_df = res_df[,colnames(res_df) %in% c(ranks,non_taxo_ranks)]
res_df$superkingdom = res_df$superkingdom %>% replace_na("Unknown")
res_df = res_df %>% column_to_rownames("ASV")
res_df=cbind(res_df,df[,colnames(df) %in% non_taxo_ranks,drop = FALSE])
return(res_df)
}
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
View(t)
taxo_normalisation = function(df, sqlFile = "accessionTaxa.sql", ranks =c("superkingdom","phylum","class","order","family","genus","species")){
ranks = str_to_lower(ranks)
colnames(df) = str_to_lower(colnames(df))
if("kingdom" %in% ranks){
ranks[ranks == "kingdom"] = "superkingdom"
}
if("asv" %in% colnames(df)){
df = df %>% column_to_rownames("asv")
}
df[df==""]<-NA
paternsToRemove = c("^.+_environmental.+|environmental_.+|uncultured_.+|_sp\\..+|_sp.|_sp.+| sp\\..+| sp.| sp.+|_\\(.+|^.+_metagenome|_cf.")
df = df %>% mutate_all(list(~str_replace(.,paternsToRemove, ""))) %>% mutate_all(list(~na_if(.,"")))
if("species" %in% tolower(colnames(df))){
df$Species = paste0(sapply(strsplit(df$Species,"_"), `[`, 1)," ", sapply(strsplit(df$Species,"_"), `[`, 2))
}
df = df %>% mutate_all(list(~str_replace(.,"NA NA| NA", ""))) %>% mutate(across(everything(), gsub, pattern = "_", replacement = " ")) %>% mutate_all(list(~na_if(.,"")))
ranks_indexes = which(tolower(colnames(df)) %in% ranks)
non_taxo_ranks = c("otu","otus","OTU","OTUs","OTUS","asv","asvs","ASVs","ASV","ASVS","nR")
rpt_indexes = max.col(!is.na(df[colnames(df)%ni%non_taxo_ranks]), "last")
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df[x, rpt_indexes[x]]))
res_df = data.frame("ASV" = rownames(df), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df$id = getId(taxa = res_df$taxa, sqlFile = sqlFile, onlyScientific = TRUE) ###############################################
length(res_df[which(is.na(res_df$id)),]$id)
r = 1
# Deals with NA ids
while (r<length(ranks_indexes) & any(is.na(res_df$id))) {
df_temp = df[which(is.na(res_df$id)),]
res_df_temp = res_df[which(is.na(res_df$id)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - r
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
res_df_temp = data.frame("ASV" = rownames(df_temp), "rpt_indexes" = rpt_indexes, "taxa" = taxa)
res_df[which(is.na(res_df$id)),]$id = getId(taxa = res_df_temp$taxa, sqlFile = sqlFile, onlyScientific = TRUE)
length(res_df[which(is.na(res_df$id)),]$id)
r = r + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 1
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
# Deals with multiple ids again but at higher level
n = 1
number_ids = max(str_count(res_df$id, pattern = ","),na.rm = T) + 1
if(!is.na(any(str_detect(res_df$id, ",", negate = FALSE))))
while (n<=number_ids & any(str_detect(res_df$id, ",", negate = FALSE))) {
df_temp = df[which(str_detect(res_df$id, ",", negate = FALSE)),]
res_df_temp = res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]
rpt_indexes = max.col(!is.na(df_temp[colnames(df_temp)%ni%non_taxo_ranks]), "last") - 2
rpt_indexes = pmax(rpt_indexes,1) # makes sure to have no negative or 0 values
res_df_temp$p_taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
taxa = unlist(lapply(1:length(rpt_indexes), function(x) df_temp[x, rpt_indexes[x]]))
test = getTaxonomy(res_df_temp$id %>% strsplit( "," ) %>% sapply( "[", n ), sqlFile, desiredTaxa = ranks) %>% as.data.frame()
for (i in 1:nrow(res_df_temp)) {
res_df_temp$id[i] = ifelse(res_df_temp$p_taxa[i] %in% test[i,], res_df_temp$id[i] %>% strsplit( "," ) %>% sapply( "[", n ),res_df_temp$id[i])
}
res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id = res_df_temp$id
length(res_df[which(str_detect(res_df$id, ",", negate = FALSE)),]$id)
n = n + 1
}
res_df[ranks] = getTaxonomy(res_df$id, sqlFile, desiredTaxa = str_to_lower(ranks))
res_df = res_df[,colnames(res_df) %in% c(ranks,non_taxo_ranks)]
res_df$superkingdom = res_df$superkingdom %>% replace_na("Unknown")
res_df = res_df %>% column_to_rownames("ASV")
res_df=cbind(res_df,df[,colnames(df) %in% non_taxo_ranks,drop = FALSE])
return(res_df)
}
data("ps_test_data")
taxo_df = ps_test_data@tax_table@.Data %>% as.data.frame()
t=taxo_normalisation(taxo_df, sqlFile = 'accessionTaxa.sql', ranks = c("Kingdom", "Phylum",  "Class",   "Order",   "Family",  "Genus"))
View(t)
