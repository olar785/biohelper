ps_to_microDecon = function(ps, groups=NA, runs=2, thresh = 0.7, prop.thresh = 0.00005, regression = 0, low.threshold=40, up.threshold=400){
microDecon_2_phyloseq = function(ps_obj, env, decontaminated, taxo_ranks=NULL){
if("Mean.blank" %in% colnames(decontaminated$decon.table)){
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Mean.blank","Taxonomy")], taxa_are_rows = T)
}else{
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Taxonomy")], taxa_are_rows = T)
}
rownames(otu_table_ps) = decontaminated$decon.table$OTU_ID
if(!is.null(taxo_ranks)){
tax_ps = tax_table(decontaminated$decon.table$Taxonomy %>% colsplit(";", names = taxo_ranks))
rownames(tax_ps) = decontaminated$decon.table$OTU_ID
ps_trimmed = merge_phyloseq(otu_table_ps,tax_ps)
colnames(ps_trimmed@tax_table) = taxo_ranks
}
if(!is.null(ps_taxa_trimmed@refseq)){
# Adding back the sequences
ps_taxa_trimmed = prune_taxa(ps_trimmed %>% taxa_names(), ps_obj)
fasta_ASVs = ps_taxa_trimmed@refseq
fasta_ASVs = fasta_ASVs[match(ps_taxa_trimmed %>% taxa_names(), fasta_ASVs@ranges@NAMES),]
ps_trimmed@refseq = phyloseq::refseq(fasta_ASVs)
}
# Adding back the environmental data
env=env[rownames(env) %in% sample_names(ps_trimmed),]
env=env[match(sample_names(ps_trimmed),rownames(env)),]
sample_data(ps_trimmed) = sample_data(env)
return(ps_trimmed)
}
ps = prune_samples(sample_sums(ps) > 0, ps) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE)
ps@sam_data[which(ps@sam_data$blank_type=="NA"),]$blank_type = NA;ps@sam_data[which(ps@sam_data$blank_type=="na"),]$blank_type = NA;ps@sam_data[which(ps@sam_data$blank_type==""),]$blank_type = NA;ps@sam_data[which(ps@sam_data$blank_type=="NaN"),]$blank_type = NA
metadata = pstoveg_sample(ps) %>% dplyr::arrange(blank_type)
ASV_table_ps = pstoveg_otu(ps) %>% t() %>% as.data.frame()
ASV_table_ps = ASV_table_ps[,match(metadata$sample_id, names(ASV_table_ps))] %>% rownames_to_column('OTU_ID')
names_blanks_ps = c("OTU_ID",ps %>% subset_samples(!is.na(blank_type)) %>% sample_names())
names_samples_ps = ps %>% subset_samples(is.na(blank_type)) %>% sample_names()
ASV_table_ps <- subset(ASV_table_ps, select=c(names_blanks_ps,names_samples_ps))
if(!is.null(ps@tax_table)){
Taxo=as.data.frame(ps@tax_table@.Data); Taxo$OTU_ID = rownames(Taxo)
sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
}
df_temp = metadata %>% group_by_at(which(colnames(metadata) %in% c("blank_type",groups))) %>% dplyr::count()
#MicroDecon function
if(!is.null(ps@tax_table)){
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext, taxo_ranks = colnames(Taxo)[(colnames(Taxo)!="OTU_ID")])
}else{
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = FALSE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext)
}
return(ps_trimmed)
}
ps_to_microDecon(ps_test_data, groups = "extraction_method")
ps@sam_data[which(ps@sam_data$blank_type=="NA"),]$blank_type = NA
ps@sam_data[which(ps@sam_data$blank_type=="NA"),]$blank_type = NA
ps@sam_data$blank_type
str_replace(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA)
ps@sam_data$blank_type = str_replace(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
ps@sam_data$blank_type
str_replace(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
str_replace_all(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
ps_to_microDecon = function(ps, groups=NA, runs=2, thresh = 0.7, prop.thresh = 0.00005, regression = 0, low.threshold=40, up.threshold=400){
microDecon_2_phyloseq = function(ps_obj, env, decontaminated, taxo_ranks=NULL){
if("Mean.blank" %in% colnames(decontaminated$decon.table)){
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Mean.blank","Taxonomy")], taxa_are_rows = T)
}else{
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Taxonomy")], taxa_are_rows = T)
}
rownames(otu_table_ps) = decontaminated$decon.table$OTU_ID
if(!is.null(taxo_ranks)){
tax_ps = tax_table(decontaminated$decon.table$Taxonomy %>% colsplit(";", names = taxo_ranks))
rownames(tax_ps) = decontaminated$decon.table$OTU_ID
ps_trimmed = merge_phyloseq(otu_table_ps,tax_ps)
colnames(ps_trimmed@tax_table) = taxo_ranks
}
if(!is.null(ps_taxa_trimmed@refseq)){
# Adding back the sequences
ps_taxa_trimmed = prune_taxa(ps_trimmed %>% taxa_names(), ps_obj)
fasta_ASVs = ps_taxa_trimmed@refseq
fasta_ASVs = fasta_ASVs[match(ps_taxa_trimmed %>% taxa_names(), fasta_ASVs@ranges@NAMES),]
ps_trimmed@refseq = phyloseq::refseq(fasta_ASVs)
}
# Adding back the environmental data
env=env[rownames(env) %in% sample_names(ps_trimmed),]
env=env[match(sample_names(ps_trimmed),rownames(env)),]
sample_data(ps_trimmed) = sample_data(env)
return(ps_trimmed)
}
ps = prune_samples(sample_sums(ps) > 0, ps) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE)
ps@sam_data$blank_type = str_replace_all(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
metadata = pstoveg_sample(ps) %>% dplyr::arrange(blank_type)
ASV_table_ps = pstoveg_otu(ps) %>% t() %>% as.data.frame()
ASV_table_ps = ASV_table_ps[,match(metadata$sample_id, names(ASV_table_ps))] %>% rownames_to_column('OTU_ID')
names_blanks_ps = c("OTU_ID",ps %>% subset_samples(!is.na(blank_type)) %>% sample_names())
names_samples_ps = ps %>% subset_samples(is.na(blank_type)) %>% sample_names()
ASV_table_ps <- subset(ASV_table_ps, select=c(names_blanks_ps,names_samples_ps))
if(!is.null(ps@tax_table)){
Taxo=as.data.frame(ps@tax_table@.Data); Taxo$OTU_ID = rownames(Taxo)
sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
}
df_temp = metadata %>% group_by_at(which(colnames(metadata) %in% c("blank_type",groups))) %>% dplyr::count()
#MicroDecon function
if(!is.null(ps@tax_table)){
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext, taxo_ranks = colnames(Taxo)[(colnames(Taxo)!="OTU_ID")])
}else{
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = FALSE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext)
}
return(ps_trimmed)
}
ps_to_microDecon(ps_test_data, groups = "extraction_method")
t=ps_to_microDecon(ps_test_data, groups = "extraction_method")
tt=t@tax_table@.Data %>% as.data.frame()
View(tt)
ps_to_microDecon = function(ps, groups=NA, runs=2, thresh = 0.7, prop.thresh = 0.00005, regression = 0, low.threshold=40, up.threshold=400){
microDecon_2_phyloseq = function(ps_obj, env, decontaminated, taxo_ranks=NULL){
if("Mean.blank" %in% colnames(decontaminated$decon.table)){
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Mean.blank","Taxonomy")], taxa_are_rows = T)
}else{
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Taxonomy")], taxa_are_rows = T)
}
rownames(otu_table_ps) = decontaminated$decon.table$OTU_ID
if(!is.null(taxo_ranks)){
tax_ps = tax_table(decontaminated$decon.table$Taxonomy %>% colsplit(";", names = taxo_ranks))
rownames(tax_ps) = decontaminated$decon.table$OTU_ID
ps_trimmed = merge_phyloseq(otu_table_ps,tax_ps)
colnames(ps_trimmed@tax_table) = taxo_ranks
}
if(!is.null(ps_taxa_trimmed@refseq)){
# Adding back the sequences
ps_taxa_trimmed = prune_taxa(ps_trimmed %>% taxa_names(), ps_obj)
fasta_ASVs = ps_taxa_trimmed@refseq
fasta_ASVs = fasta_ASVs[match(ps_taxa_trimmed %>% taxa_names(), fasta_ASVs@ranges@NAMES),]
ps_trimmed@refseq = phyloseq::refseq(fasta_ASVs)
}
# Adding back the environmental data
env=env[rownames(env) %in% sample_names(ps_trimmed),]
env=env[match(sample_names(ps_trimmed),rownames(env)),]
sample_data(ps_trimmed) = sample_data(env)
return(ps_trimmed)
}
ps = prune_samples(sample_sums(ps) > 0, ps) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE)
ps@sam_data$blank_type = str_replace_all(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
metadata = pstoveg_sample(ps) %>% dplyr::arrange(blank_type)
ASV_table_ps = pstoveg_otu(ps) %>% t() %>% as.data.frame()
ASV_table_ps = ASV_table_ps[,match(metadata$sample_id, names(ASV_table_ps))] %>% rownames_to_column('OTU_ID')
names_blanks_ps = c("OTU_ID",ps %>% subset_samples(!is.na(blank_type)) %>% sample_names())
names_samples_ps = ps %>% subset_samples(is.na(blank_type)) %>% sample_names()
ASV_table_ps <- subset(ASV_table_ps, select=c(names_blanks_ps,names_samples_ps))
if(!is.null(ps@tax_table)){
Taxo=as.data.frame(ps@tax_table@.Data); Taxo$OTU_ID = rownames(Taxo)
sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
}
df_temp = metadata %>% group_by_at(which(colnames(metadata) %in% c("blank_type",groups))) %>% dplyr::count()
#MicroDecon function
if(!is.null(ps@tax_table)){
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext, taxo_ranks = colnames(Taxo)[(colnames(Taxo)!="OTU_ID")])
}else{
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = FALSE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext)
}
# Printing results
ntaxa_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% ntaxa()
ntaxa_after = ntaxa(ps_trimmed)
cat("\nContamination look-up in samples with MicroDecon\n")
cat(paste0("Number of ASVs totally removed: ",ntaxa_before - ntaxa_after))
cat(paste0("Percent of ASVs removed: ",round((1 - (ntaxa_after / ntaxa_before)) * 100,2), " %"))
reads_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
reads_after = ps_trimmed %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
cat(paste0("Total number of reads  removed: ",reads_before - reads_after))
cat("\nPercent of reads removed: ",paste0(round((1 - (reads_after / reads_before)) * 100,2)," %"))
return(ps_trimmed)
}
ps_to_microDecon(ps_test_data, groups = "extraction_method")
ps_to_microDecon = function(ps, groups=NA, runs=2, thresh = 0.7, prop.thresh = 0.00005, regression = 0, low.threshold=40, up.threshold=400){
microDecon_2_phyloseq = function(ps_obj, env, decontaminated, taxo_ranks=NULL){
if("Mean.blank" %in% colnames(decontaminated$decon.table)){
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Mean.blank","Taxonomy")], taxa_are_rows = T)
}else{
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Taxonomy")], taxa_are_rows = T)
}
rownames(otu_table_ps) = decontaminated$decon.table$OTU_ID
if(!is.null(taxo_ranks)){
tax_ps = tax_table(decontaminated$decon.table$Taxonomy %>% colsplit(";", names = taxo_ranks))
rownames(tax_ps) = decontaminated$decon.table$OTU_ID
ps_trimmed = merge_phyloseq(otu_table_ps,tax_ps)
colnames(ps_trimmed@tax_table) = taxo_ranks
}
if(!is.null(ps_taxa_trimmed@refseq)){
# Adding back the sequences
ps_taxa_trimmed = prune_taxa(ps_trimmed %>% taxa_names(), ps_obj)
fasta_ASVs = ps_taxa_trimmed@refseq
fasta_ASVs = fasta_ASVs[match(ps_taxa_trimmed %>% taxa_names(), fasta_ASVs@ranges@NAMES),]
ps_trimmed@refseq = phyloseq::refseq(fasta_ASVs)
}
# Adding back the environmental data
env=env[rownames(env) %in% sample_names(ps_trimmed),]
env=env[match(sample_names(ps_trimmed),rownames(env)),]
sample_data(ps_trimmed) = sample_data(env)
return(ps_trimmed)
}
ps = prune_samples(sample_sums(ps) > 0, ps) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE)
ps@sam_data$blank_type = str_replace_all(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
metadata = pstoveg_sample(ps) %>% dplyr::arrange(blank_type)
ASV_table_ps = pstoveg_otu(ps) %>% t() %>% as.data.frame()
ASV_table_ps = ASV_table_ps[,match(metadata$sample_id, names(ASV_table_ps))] %>% rownames_to_column('OTU_ID')
names_blanks_ps = c("OTU_ID",ps %>% subset_samples(!is.na(blank_type)) %>% sample_names())
names_samples_ps = ps %>% subset_samples(is.na(blank_type)) %>% sample_names()
ASV_table_ps <- subset(ASV_table_ps, select=c(names_blanks_ps,names_samples_ps))
if(!is.null(ps@tax_table)){
Taxo=as.data.frame(ps@tax_table@.Data); Taxo$OTU_ID = rownames(Taxo)
sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
}
df_temp = metadata %>% group_by_at(which(colnames(metadata) %in% c("blank_type",groups))) %>% dplyr::count()
#MicroDecon function
if(!is.null(ps@tax_table)){
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext, taxo_ranks = colnames(Taxo)[(colnames(Taxo)!="OTU_ID")])
}else{
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = FALSE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext)
}
# Printing results
ntaxa_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% ntaxa()
ntaxa_after = ntaxa(ps_trimmed)
cat("\nContamination look-up in samples with MicroDecon\n")
cat(paste0("Number of ASVs totally removed: ",ntaxa_before - ntaxa_after))
cat("\n")
cat(paste0("Percent of ASVs removed: ",round((1 - (ntaxa_after / ntaxa_before)) * 100,2), " %"))
cat("\n")
reads_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
reads_after = ps_trimmed %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
cat(paste0("Total number of reads  removed: ",reads_before - reads_after))
cat("\n")
cat("\nPercent of reads removed: ",paste0(round((1 - (reads_after / reads_before)) * 100,2)," %"))
return(ps_trimmed)
}
ps_to_microDecon(ps_test_data, groups = "extraction_method")
ps_to_microDecon = function(ps, groups=NA, runs=2, thresh = 0.7, prop.thresh = 0.00005, regression = 0, low.threshold=40, up.threshold=400){
microDecon_2_phyloseq = function(ps_obj, env, decontaminated, taxo_ranks=NULL){
if("Mean.blank" %in% colnames(decontaminated$decon.table)){
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Mean.blank","Taxonomy")], taxa_are_rows = T)
}else{
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Taxonomy")], taxa_are_rows = T)
}
rownames(otu_table_ps) = decontaminated$decon.table$OTU_ID
if(!is.null(taxo_ranks)){
tax_ps = tax_table(decontaminated$decon.table$Taxonomy %>% colsplit(";", names = taxo_ranks))
rownames(tax_ps) = decontaminated$decon.table$OTU_ID
ps_trimmed = merge_phyloseq(otu_table_ps,tax_ps)
colnames(ps_trimmed@tax_table) = taxo_ranks
}
if(!is.null(ps_taxa_trimmed@refseq)){
# Adding back the sequences
ps_taxa_trimmed = prune_taxa(ps_trimmed %>% taxa_names(), ps_obj)
fasta_ASVs = ps_taxa_trimmed@refseq
fasta_ASVs = fasta_ASVs[match(ps_taxa_trimmed %>% taxa_names(), fasta_ASVs@ranges@NAMES),]
ps_trimmed@refseq = phyloseq::refseq(fasta_ASVs)
}
# Adding back the environmental data
env=env[rownames(env) %in% sample_names(ps_trimmed),]
env=env[match(sample_names(ps_trimmed),rownames(env)),]
sample_data(ps_trimmed) = sample_data(env)
return(ps_trimmed %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE))
}
ps = prune_samples(sample_sums(ps) > 0, ps) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE)
ps@sam_data$blank_type = str_replace_all(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
metadata = pstoveg_sample(ps) %>% dplyr::arrange(blank_type)
ASV_table_ps = pstoveg_otu(ps) %>% t() %>% as.data.frame()
ASV_table_ps = ASV_table_ps[,match(metadata$sample_id, names(ASV_table_ps))] %>% rownames_to_column('OTU_ID')
names_blanks_ps = c("OTU_ID",ps %>% subset_samples(!is.na(blank_type)) %>% sample_names())
names_samples_ps = ps %>% subset_samples(is.na(blank_type)) %>% sample_names()
ASV_table_ps <- subset(ASV_table_ps, select=c(names_blanks_ps,names_samples_ps))
if(!is.null(ps@tax_table)){
Taxo=as.data.frame(ps@tax_table@.Data); Taxo$OTU_ID = rownames(Taxo)
sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
}
df_temp = metadata %>% group_by_at(which(colnames(metadata) %in% c("blank_type",groups))) %>% dplyr::count()
#MicroDecon function
if(!is.null(ps@tax_table)){
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext, taxo_ranks = colnames(Taxo)[(colnames(Taxo)!="OTU_ID")])
}else{
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = FALSE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext)
}
# Printing results
ntaxa_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% ntaxa()
ntaxa_after = ntaxa(ps_trimmed)
cat("\nContamination look-up in samples with MicroDecon\n")
cat(paste0("Number of ASVs totally removed: ",ntaxa_before - ntaxa_after))
cat("\n")
cat(paste0("Percent of ASVs removed: ",round((1 - (ntaxa_after / ntaxa_before)) * 100,2), " %"))
cat("\n")
reads_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
reads_after = ps_trimmed %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
cat(paste0("Total number of reads  removed: ",reads_before - reads_after))
cat("\n")
cat("\nPercent of reads removed: ",paste0(round((1 - (reads_after / reads_before)) * 100,2)," %"))
cat("\n")
return(ps_trimmed)
}
ps_to_microDecon(ps_test_data, groups = "extraction_method")
ps_to_microDecon = function(ps, groups=NA, runs=2, thresh = 0.7, prop.thresh = 0.00005, regression = 0, low.threshold=40, up.threshold=400){
microDecon_2_phyloseq = function(ps_obj, env, decontaminated, taxo_ranks=NULL){
if("Mean.blank" %in% colnames(decontaminated$decon.table)){
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Mean.blank","Taxonomy")], taxa_are_rows = T)
}else{
otu_table_ps = otu_table(decontaminated$decon.table[colnames(decontaminated$decon.table) %ni% c("OTU_ID","Taxonomy")], taxa_are_rows = T)
}
rownames(otu_table_ps) = decontaminated$decon.table$OTU_ID
if(!is.null(taxo_ranks)){
tax_ps = tax_table(decontaminated$decon.table$Taxonomy %>% colsplit(";", names = taxo_ranks))
rownames(tax_ps) = decontaminated$decon.table$OTU_ID
ps_trimmed = merge_phyloseq(otu_table_ps,tax_ps)
colnames(ps_trimmed@tax_table) = taxo_ranks
}
if(!is.null(ps_taxa_trimmed@refseq)){
# Adding back the sequences
ps_taxa_trimmed = prune_taxa(ps_trimmed %>% taxa_names(), ps_obj)
fasta_ASVs = ps_taxa_trimmed@refseq
fasta_ASVs = fasta_ASVs[match(ps_taxa_trimmed %>% taxa_names(), fasta_ASVs@ranges@NAMES),]
ps_trimmed@refseq = phyloseq::refseq(fasta_ASVs)
}
# Adding back the environmental data
env=env[rownames(env) %in% sample_names(ps_trimmed),]
env=env[match(sample_names(ps_trimmed),rownames(env)),]
sample_data(ps_trimmed) = sample_data(env)
return(ps_trimmed %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE))
}
ps = prune_samples(sample_sums(ps) > 0, ps) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE)
ps@sam_data$blank_type = str_replace_all(ps@sam_data$blank_type, pattern = c("NA","na","Na","NaN","nan",""), replacement = NA_character_)
metadata = pstoveg_sample(ps) %>% dplyr::arrange(blank_type)
ASV_table_ps = pstoveg_otu(ps) %>% t() %>% as.data.frame()
ASV_table_ps = ASV_table_ps[,match(metadata$sample_id, names(ASV_table_ps))] %>% rownames_to_column('OTU_ID')
names_blanks_ps = c("OTU_ID",ps %>% subset_samples(!is.na(blank_type)) %>% sample_names())
names_samples_ps = ps %>% subset_samples(is.na(blank_type)) %>% sample_names()
ASV_table_ps <- subset(ASV_table_ps, select=c(names_blanks_ps,names_samples_ps))
if(!is.null(ps@tax_table)){
Taxo=as.data.frame(ps@tax_table@.Data); Taxo$OTU_ID = rownames(Taxo)
sorted = Taxo %>% unite("Taxonomy", 1:(ncol(Taxo)-1),sep = ";")
ASV_table_ps = ASV_table_ps[match(sorted$OTU_ID,ASV_table_ps$OTU_ID),]
ASV_table_ps$Taxonomy = sorted$Taxonomy
}
df_temp = metadata %>% group_by_at(which(colnames(metadata) %in% c("blank_type",groups))) %>% dplyr::count()
#MicroDecon function
if(!is.null(ps@tax_table)){
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = TRUE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext, taxo_ranks = colnames(Taxo)[(colnames(Taxo)!="OTU_ID")])
}else{
decontaminated_ext <- decon(data = ASV_table_ps, numb.blanks=sum(df_temp[!is.na(df_temp$blank_type),]$n), numb.ind = df_temp[is.na(df_temp$blank_type),]$n, taxa = FALSE,runs, thresh, prop.thresh, regression, low.threshold, up.threshold)
ps_trimmed = microDecon_2_phyloseq(ps_obj = ps, env = pstoveg_sample(ps), decontaminated = decontaminated_ext)
}
# Printing results
ntaxa_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% ntaxa()
ntaxa_after = ntaxa(ps_trimmed)
cat("\nContamination look-up in samples with MicroDecon\n")
cat(paste0("Number of ASVs totally removed: ",ntaxa_before - ntaxa_after))
cat("\n")
cat(paste0("Percent of ASVs removed: ",round((1 - (ntaxa_after / ntaxa_before)) * 100,2), " %"))
cat("\n")
reads_before = ps %>% subset_samples(is.na(blank_type)) %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
reads_after = ps_trimmed %>% phyloseq::filter_taxa(function(x) sum(x) > 0, TRUE) %>% sample_sums() %>% sum()
cat(paste0("Total number of reads  removed: ",reads_before - reads_after))
cat("\nPercent of reads removed: ",paste0(round((1 - (reads_after / reads_before)) * 100,2)," %"))
cat("\n")
return(ps_trimmed)
}
ps_to_microDecon(ps_test_data, groups = "extraction_method")
t=ps_to_microDecon(ps_test_data, groups = "extraction_method")
devtools::document() # coomand to update documantation to package
library(biohelper)
ps=ps_test_data
ps@sam_data$blank_type
ps@sam_data$extraction_method
library(biohelper)
ps_to_microDecon(ps_test_data, groups = "extraction_method")
NAs_to_Xs(ps_test_data@tax_table@.Data %>% as.data.frame()) %>% head()
NAs_to_Xs(ps_test_data@tax_table@.Data %>% as.data.frame())
NAs_to_Xs(ps_test_data@tax_table@.Data %>% as.data.frame()) %>% View()
devtools::document() # coomand to update documantation to package
library(biohelper)
library(biohelper)
library(biohelper)
p1 = taxo_bar_plot(ps_test_data_t,  f = "extraction_method")
ps_test_data_t = ps_test_data %>% microbiome::transform(transform = "compositional") #%>% tax_glom('Family')
p1 = taxo_bar_plot(ps_test_data_t,  f = "extraction_method")
p1 + facet_wrap(extraction_method~., drop = TRUE, scale="free", nrow = 1) + ggtitle("Taxonomic composition per extraction method")
p1
colors = c("cyan", "palegreen", "yellow", "deeppink ", "white", "dodgerblue", "lightsalmon")
p1 = taxo_bar_plot(ps_test_data_t, rank1 = "Phylum", rank2 = "Family", colors = colors,  f = "extraction_method")
p1
ps_obj=ps_test_data_t
# Creating dataframe
dfn = psmelt(ps_obj)
# Removing taxa with zero abundance
dff = dfn[dfn$Abundance>0,]
# Converting all factors to character strings
dff = dff %>% mutate_if(is.factor, as.character)
# Changing rare rank1 to 'Others'
ranks = colnames(ps_obj@tax_table@.Data)
rank1 = "Phylum"
rank2 = "Family"
n_rank1 = NA
n_rank2 = 6
n_rank1 = if(is.na(n_rank1)){
n_rank1 = length(colors)
}
n_rank1
n_rank1=NA
n_rank1 = if(is.na(n_rank1)){
n_rank1 = length(colors)-1
}
n_rank1
taxo_bar_plot = function(ps_obj, rank1 = "Phylum", rank2 = "Family", n_rank1 = NA, n_rank2 = 6, colors = c("cyan", "palegreen", "yellow", "deeppink ", "white", "dodgerblue", "lightsalmon"),f=NA){
n_rank1 = if(is.na(n_rank1)){
n_rank1 = length(colors)-1
}
# Creating dataframe
dfn = psmelt(ps_obj)
# Removing taxa with zero abundance
dff = dfn[dfn$Abundance>0,]
# Converting all factors to character strings
dff = dff %>% mutate_if(is.factor, as.character)
# Changing rare rank1 to 'Others'
ranks = colnames(ps_obj@tax_table@.Data)
temp = dff %>% dplyr::group_by_at(which(colnames(dff)==ranks[1]):which(colnames(dff)==rank1)) %>% dplyr::summarise(rank1_Sum = sum(Abundance))
temp_2 = temp %>% arrange(desc(rank1_Sum))
temp_2 = temp_2 %>% top_n(n_rank1)
list_of_rare_rank1 = temp[(temp[,rank1] %>% as_vector() %>% unname()) %ni% (temp_2[,rank1] %>% as_vector() %>% unname()),rank1] %>% as_vector() %>% unname()
dff[dff[,rank1] %in% list_of_rare_rank1,rank1] = "Others"
# Changing rare families to 'Others'
temp = dff %>% dplyr::group_by_at(c(which(colnames(dff)=="OTU"), which(colnames(dff)==ranks[1]):which(colnames(dff)==ranks[length(ranks)]))) %>% dplyr::summarise(ran2_Sum = sum(Abundance)) %>% as.data.frame()
temp_3 = temp %>% arrange(desc(ran2_Sum))
temp_3 = temp %>% group_by_at(which(colnames(temp)==ranks[1]):which(colnames(temp)==rank1)) %>% slice_max(order_by = ran2_Sum, n = 5)
list_of_rare_rank2 = temp[(temp[,rank2] %>% as_vector() %>% unname()) %ni% (temp_3[,rank2] %>% as_vector() %>% unname()),]$OTU
list_of_rare_rank2 = c(list_of_rare_rank2,temp[temp[,which(colnames(temp)==rank2)]=="NA",]$OTU)
dff[dff$OTU %in% list_of_rare_rank2,rank2] = "Others"
#darken each color n times in increments of steps towards black
ExpandColors <- function(colors, n, steps = 11){
if(n <= steps){
suppressWarnings({
sapply(colors, function(x){colorRampPalette(c(x, "#000000"))(steps)}) %>%
as.data.frame() %>%
filter(row_number() <= n) %>%
gather(key = original.color, value = expanded.color)
})
}else{
warning("Select n < steps!")
}
}
r1 = unique(dff[,rank1]) %>% as.character() %>% sort()
names(r1) = r1
color_list = list()
i = 1
for (j in seq(from = 1, to = length(colors))) {
getPalette = colorRampPalette(colors[i], alpha = T)
taxaList = sort(unique(dff[(dff[,rank1] %>% as.vector() %>% unname()) == names(r1[i]),rank2] %>% as.vector() %>% unname()))
color_list[i] = list(ExpandColors(colors[i], n = length(taxaList)))
r1[i] = list(as.data.frame(color_list[i])$expanded.color)
if (!is.null(r1[[i]])) {
names(r1[[i]]) = taxaList
}
i = i+1
}
r1Palette = unlist(r1)
# Adding r1 name to r2 name
dff[,rank2] = paste0(dff[,rank1] %>% as.vector() %>% unname(),".",dff[,rank2] %>% as.vector() %>% unname())
dff = dff[order(dff[,rank2]),]
labls = unique(dff[,rank2])
names(labls) = seq(length(labls))
# Adding a labbel column
func = function(rank2){
return(names(labls[labls == rank2]))
}
dff$labls = sapply(dff[,rank2], func)
dft = dff %>% dplyr::group_by_at(which(colnames(dff) %in% c("Sample","OTU",rank2, f))) %>% dplyr::summarise(Abund=sum(Abundance)*100)
# Making plot
return(ggplot(data = dft, aes(Sample, Abund, fill = pull(dft, rank2))) +
geom_bar(stat="identity",color="black") +
theme_bw() +
ylab("Relative abundance (%)") +
scale_fill_manual(values=r1Palette) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
guides(fill=guide_legend(title=rank2))
)
}
taxo_bar_plot(ps_test_data_t, rank1 = "Phylum", rank2 = "Family", colors = colors,  f = "extraction_method")
devtools::document() # coomand to update documantation to package
devtools::document() # coomand to update documantation to package
library(biohelper)
library(biohelper)
ps_test_data_t = ps_test_data %>% microbiome::transform(transform = "compositional") #%>% tax_glom('Family')
p1 = taxo_bar_plot(ps_test_data_t, rank1 = "Phylum", rank2 = "Family",  f = "extraction_method")
p1
p2 = p1 + facet_wrap(extraction_method~., drop = TRUE, scale="free", nrow = 1) + ggtitle("Taxonomic composition per extraction method")
p2
p1 = taxo_bar_plot(ps_test_data_t, rank1 = "Family", rank2 = "Genus",  f = "extraction_method")
p1
p1 = taxo_bar_plot(ps_test_data_t, rank1 = "Phylum", rank2 = "Genus",  f = "extraction_method")
p1
